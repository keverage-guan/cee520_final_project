{
    "title": "Syntonic Tuning: Creating a Model for Accurate Electronic Playback",
    "date": "2004/02/01",
    "volume": "10",
    "issue": "1",
    "authors": [
        "Wibberley, Roger"
    ],
    "abstract": "This essay is explicitly “educational” in the proper sense: although it has a technical focus this is intended to provide the means of re-examining and reassessing one’s own cognitive processes. It has often been argued that a proper understanding of early music is hindered by our own inability to “hear the music” in the way our ancestors did. Our “modern” ears have (it is often rightly said) become conditioned over time by the sound worlds of later systems of tuning and performance to the extent that our perception of the aesthetics applied to early styles can only be the result of educated guesswork. “We cannot know how a Pythagorean performance really sounded (can we?), and our understanding of the soundscape of Just Intonation (JI) is mainly intuitive, backed up perhaps by a complicated theoretical list of mathematical ratios (isn’t it?).” There is considerably more to a performance than accurate intonation (which is only the starting point) and this essay (along with the previous two) only seeks to explore the particular aspects of performance involving pitch. But the above sense of resignation and capitulation can at least be partly addressed by examining aspects of tuning, and the procedures discussed below will at least provide a means of capturing this single—albeit crucial—aspect of performance. Nothing will replace a group of well-equipped and trained singers, but it is my belief that such singers would need a highly specialized training before successfully achieving performances of the kind outlined. Even then, the nature of “live performance” (however accurate empirically) may still be the victim of only a subjective response from the listener (who is naturally more inclined to trust his or her own preconditioned cognitive responses than the results such singers might produce). This essay, therefore, provides a computer-generated means of evaluation, and the sounds provided are empirically correct in their intonation by all standards proclaimed in theoretical works of the time. The challenge, then, is to develop a self-critical approach in which—fully knowing that what is being heardis(intonationally) herein the same for us as it was for them—we can reappraise our own cognition. If any tunings that are created by the application of anything covered in the essay strike the listener as in any way “strange,” “out of tune” or “unusual,” this can be taken confidently as a direct invitation to the listener to reappraise his or her own cognition.",
    "keywords": [
        "Cents",
        "Costeley",
        "equal temperament",
        "Finale",
        "interval ratio",
        "pitchbend",
        "pitchwheel",
        "Pythagorean",
        "Syntonic comma"
    ],
    "doi": "",
    "received": "July 2003",
    "pdf": "http://www.mtosmt.org/issues/mto.04.10.1/mto.04.10.1.wibberley3.pdf",
    "author_info": [
        {
            "name": "Roger Wibberley",
            "university": "Goldsmiths University of London,",
            "address": "Department of Music,, New Cross,, London SE14 6NW",
            "email": "r.wibberley@gold.ac.uk"
        }
    ],
    "citations": {},
    "footnotes": {
        "FN1": {
            "text": "1. Of the many available music notation programs, my \npreference for Finale here is only because it is particularly well suited to \ncombining visual analysis with superfine pitch control. But its method is \nunique, and files converted into, say, Sibelius will not retain the MIDI \nsettings that have been applied. Although Finale has been upgraded regularly, \nmost of the changes have been designed only to enhance user friendliness and to \npresent better looking windows and scores. The window dressing aside, the \nfunctionality of the program has remained fairly stable. But in the specific \narea to be discussed below later versions of Finale have adopted a slightly \ndifferent (and perhaps more logical) method of data management. This will be \nexplained in due course.",
            "citations": []
        },
        "FN2": {
            "text": "2. Readers might like to know that the writer does not \nregard himself as a technological boffin, and they might perhaps be comforted \n(or irritated if they expect boffin-style discourse) by the assurance that \nexplanations will be simple and comprehensible.",
            "citations": []
        },
        "FN3": {
            "text": "3. If your keyboard provides other preset temperaments such \nas “Pythagorean” or “Just,” you should make sure that it is only set to equal \ntemperament. All the settings that will be provided in this essay take the \nequally-tempered keyboard as the default. None of the music to be generated will \nactually use equal temperament of course, but the pitchwheel settings presume \nthis as being the default.",
            "citations": []
        },
        "FN4": {
            "text": "4. You can verify this quite simply. Assuming your MIDI \nkeyboard is set up to generate sounds through your speakers, hold down any note \nand move the pitchwheel fully to the right and then the left. The pitch of the \nnote should rise and fall by a full octave. If it is different this does not \nmatter, and it merely indicates that the default setting has been changed. The \nsetting will again be changed later to another value in any case.",
            "citations": []
        },
        "FN5": {
            "text": "5. As will be shown, early versions of Finale provided both \nStaff Expression and Score Expression tools, while later versions offer only a \ncommon and single Expression Tool. In these later versions, setting of the \nrequired entry for either “Staff” or “Score” is made via various sub menus. The \nfunctionality of whatever entry is made remains identical however. A less useful \nmethod of pitch control is to open the Midi Tool and edit the pitchbend values \nof notes that are to be changed. This is far less accurate and anything that is \ndone remains invisible except to the inner workings of the program. The more \naccurate method outlined here remains visible in the score, and can easily be \nedited or changed.",
            "citations": []
        },
        "FN6": {
            "text": "6. If the score is empty, perhaps because the file is newly \ncreated, simply insert a note. Then select the Staff Expression tool icon and \nclick on the note.",
            "citations": []
        },
        "FN7": {
            "text": "7. Now that the procedure for editing and inserting \npitchwheel values has been followed, the various “Cancel” buttons can be clicked \nto close down the Staff Expression tool so as to avoid changing the note \noriginally selected. In order to rehearse the procedure again, the instructions \ngiven in [6] above can be repeated.",
            "citations": []
        },
        "FN8": {
            "text": "8. These are the new values that Finale automatically \nconverts to when a file created in what it recognizes as an “older version” is \nloaded into the later version. In such a file, later versions will convert \noriginal pitchwheel values of 8192 to 0, 0 to -8192, and 16384 to (+)8192. All \nresulting values in the later versions will therefore be equivalent to all those \nin the early version minus 8192 .",
            "citations": []
        },
        "FN9": {
            "text": "9. It is, however, much better than what is provided by the \nMIDI tool which only splits the same pitchbend interval into 64 equal parts. \nThis is wholly inadequate for pitches of the accuracy required.",
            "citations": []
        },
        "FN10": {
            "text": "10. The keyboard User Manual will give the information \nneeded for altering the bend value. On my Roland the bender range can be \naccessed via the “Edit” and then the “Lower” buttons, and found by scrolling \nthrough the list with the “Display” button. When “Bender Range” is displayed, \nits value can be set to “1” with the “Value” button and the new setting saved \nusing the “Write” and “Enter” buttons. Other keyboards will have equivalent \nmethods of making changes to these settings.",
            "citations": []
        },
        "FN11": {
            "text": "11. The Bend Range value increments by semitones so that \nthe default value of “12” yields a pitch bend of a full octave up and down. By \nchanging this setting to “1” the bend range will be reduced to only a semitone \nup or down.",
            "citations": []
        },
        "FN12": {
            "text": "12. Keyboards always adopted “compromise” tunings although \nsome experiments with split keys were designed to increase the number of pitches \navailable for each octave. This facilitated a differentiation between sharps and \nflats so as to enable the consistent use of pure thirds on all degrees. \nUnaccompanied vocal performance, however, did not need to compromise and comma \ninflection was a normal part of a singer’s technique. This might require the \nsame note to vary in pitch (according to context) from its normal Pythagorean \nposition to a comma higher or lower. Frequently, but under tight compositional \ncontrol, this might be extended at times up to two commas higher or lower than \nPythagorean pitch. But such flexibility was completely out of the range of \nnormal keyboards whose tuning (in whatever compromise system was adopted) had to \nremain entirely fixed for a particular performance.",
            "citations": []
        },
        "FN13": {
            "text": "13. I should again stress that files created with older \nversions are updated automatically when opened by later versions of Finale, but \nwhen creating new files in any version the user will need to know which set of values to \napply. If the list provided below for “older versions” is mistakenly used in \n“later versions,” Finale—in blissful ignorance—will produce extremely bizarre \nresults.",
            "citations": []
        },
        "FN14": {
            "text": "14. As stated in [11] above, “8192” here refers to the \ndefault numeric value for “older versions” and the following “[0]” that for \n“later.”",
            "citations": []
        },
        "FN15": {
            "text": "15. It must be remembered that the Pythagorean scale is \nthe default scale for Just Intonation, and that the tuning of JI arises from the \naddition/subtraction of the Syntonic comma (81:80) to/ from notes that are \nmodified for consonance purposes. The effect of this modification is to change \nall the Pythagorean diatonic semitones from minor (256:243) to major (16:15), to \nnarrow all the major thirds and sixths, and to widen all the minor thirds and \nsixths. But these changes all result from the single application each time of a \nSyntonic comma adjustment (upwards or downwards) that changes the default \nPythagorean pitches concerned.",
            "citations": []
        },
        "FN16": {
            "text": "16. Theorists who explain the Pythagorean scale do so in \nterms of sounding length, and this leads to sounding length ratios. Thus, for \nexample, the pure fifth is 3:2, and the octave is 2:1. Although the same ratios \nare inversely correct for the relative quantities defining the two pitches \ninvolved, they do not define the pitches themselves (but only the relative \nvalues between them). What is needed here is an unambiguous definition of the actual pitch to be generated for each note defined. This can only be achieved by converting \nthe ratio values into Cents and then calculating the pitch of each note in terms \nof the number of Cents that make it higher or lower than the default note from \nwhich it is computed.",
            "citations": []
        },
        "FN17": {
            "text": "17. This value for “G” will be the same for every “G” in \nevery octave, and all other respective values obtained for all other notes will \nbe the same for all octaves.",
            "citations": []
        },
        "FN18": {
            "text": "18. Again the numeric value for later versions is less \nthan for older ones by a total of 8192. This, like all other pitchwheel values, \nis calculated to the nearest 1 in 8192 parts of a semitone. Equally-tempered \nfifths have been narrowed from their Pythagorean defaults. Since the pitchwheel \nvalue of C is 8192 [0], the restoration of the G to its Pythagorean position \nwill necessarily increase its pitchwheel value. The new value of 8352 [160] has \nraised the pitch by a pitchwheel value of 160. When this is divided by 81.92 \n(the pitchwheel value for each Cent as shown in [14] above), the difference is \nfound to be 1.953125 Cents",
            "citations": []
        },
        "FN19": {
            "text": "19. If, for example, you indicated F-sharp with the tag \n“F#,” Finale would show “9152” because it would assume that you had asked for \nthe numeric value assigned to be displayed in place of the tag itself.",
            "citations": []
        },
        "FN20": {
            "text": "20. Experienced Finale users will know that the process of \ninserting Text Expressions can be simplified and speeded up by the use of \nmetatools. Since most pieces using Pythagorean tuning only have a range of up to \nnine different pitch classes in each octave, assigning each global pitch to a \nmetatool makes insertion very quick and easy. Other users will simply have to \nmake a separate insertion (via the Staff Expression window) for each and every \nnote in the score.",
            "citations": []
        },
        "FN21": {
            "text": "21. In the Instrument List window it will be necessary to \nassign a different instrument for each staff, and then a different channel. In \nthe “Prog.” column the same sound patch can be selected if wished.",
            "citations": []
        },
        "FN22": {
            "text": "22. This number can, of course, be changed to whatever \nvalue you like dependent upon the pitch needed relative to any tuning \nrequirement or system you wish to use. It will be set for the entire piece, \nhowever, and the current value is the one needed for its Pythagorean pitch.",
            "citations": []
        },
        "FN23": {
            "text": "23. The figure “480” indicates the same pitch inflection \nwithin the 0-8192 numeric range (used by later versions) as does the figure \n“8672” within the numeric range 8192-16384 (used by older versions), \nrepresenting simply an increase in pitch bend of 480 units.",
            "citations": []
        },
        "FN24": {
            "text": "24. It is “non-melodic” since it was considered too small \nto form a discrete interval in its own right. But when it was added to or \nsubtracted from a larger interval the overall result did yield a new melodic \ninterval. When added to a Pythagorean minor semitone, the result was a major \nsemitone (16:15) which was a distinct interval capable of being leant and \nperformed. Also when it was subtracted from a Pythagorean tone (9:8) the result \nwas the minor tone (10:9) which again was a discrete interval to be learnt and \nsung. The addition or subtraction of this quantity is what gives rise to the new \nintervals whose cognition and accurate delivery lies at the heart of the skills \nrequired for the accurate performance of Just Intonation.",
            "citations": []
        },
        "FN25": {
            "text": "25. Both these calculations are, of course, for the older \nversions of Finale. For the newer versions (which will upgrade existing \nold-version files automatically) the figure “8192” will be replaced with “0,” \nand the results of the above calculations will be respectively “-1762” and \n“1762.”",
            "citations": []
        },
        "FN26": {
            "text": "26. In order to produce a clean and pure Syntonic \nintonation, you are strongly advised to eliminate completely any default vibrato \nthat will undoubtedly be set on your MIDI keyboard. Since even the most gentle \nvibrato is unlikely to create pitch fluctuation of less than a Syntonic comma, \nit stands to reason that the presence of such vibrato will sabotage any attempt \nto enter the true sound world of Syntonic tuning. On some keyboards, even the \n“harpsichord” patch is infected by vibrato. Removing it is straightforward, but \nreference should again be made to the User Manual or technical assistance \nsought.",
            "citations": []
        },
        "FN27": {
            "text": "27. If you load it into one of the later versions of \nFinale, you will find that the values have automatically been updated to those \ncontained in Figure 12 above.",
            "citations": []
        },
        "FN28": {
            "text": "28. The issues surrounding this composition are too \ncomplex to be discussed here and will form the substance of a future article. \nBut his description of the keyboard upon which he stipulated the chanson could \nbe successfully performed, while remaining in tune throughout, shows it to have \nbeen similar to the one discussed by other musicians of the time (notably \nVicentino).",
            "citations": []
        },
        "FN29": {
            "text": "29. The tones must be smaller because if the octave equals \nnineteen intervals of one-third of a tone each there must be at least six and \none-third tones in each octave. The Pythagorean octave contains only five tones \nplus two minor semitones (which is less than six overall). The keyboard tones \ndescribed by Costeley must therefore be minor tones roughly equivalent to the \nSyntonic (10:9) minor tones. In compensation for this, the diatonic semitones \nare large (two-thirds the size of a tone in fact), and these, too, must \ncorrespond roughly with the Syntonic diatonic semitones (16:15) although they \nare marginally larger in size. The occasional use of non-diatonic semitones \n(used either melodically or arising from close cross relations) provides, \naccording to Costeley’s assessment, movement equaling only one-third of a tone.",
            "citations": []
        },
        "FN30": {
            "text": "30. In this temperament, the interval of a fifth is \nperceptibly narrowed (much more so indeed than in 12-tone equal temperament), \nand the fourths are correspondingly widened by a no less perceptible amount. The \noverall effect of this temperament is radically different from that of 12-tone \nequal temperament. In the latter, the effect (as we are used to) is one of \ntolerably pure fourths and fifths together with pure octaves, upon which have \nbeen superimposed distinctly out-of-tune thirds and sixths (to which our ears \nhave now become accustomed). In the former, however, the soundscape is one in \nwhich the fourths and fifths are sufficiently out of phase to produce a wavy \ntimbre (similar to a gentle voix celeste organ sound), upon which has now \nbeen superimposed strikingly pure thirds and sixths.",
            "citations": []
        },
        "FN31": {
            "text": "31. There will need to be twenty-one separate values \nbecause the B-sharp/C-flat and E-sharp/F-flat pairs will each need different \nvalues for both notes (even though whichever is used will provide the same \nactual pitch). Sometimes Finale will have to read F-flat, and sometimes E-sharp: \nthe first (= E in 12-tet) will have to be raised from its default pitch while \nthe second (= F in 12-tet) will need to be lowered. Whichever is used in the \nversion edited for keyboard will depend solely upon its diatonic context: if \nG-flat descends by a diatonic semitone (= two-thirds of a tone) the following \npitch will be written as F-flat; but if a D-sharp rises by a diatonic semitone \nthe following note will appear as E-sharp. Finale therefore needs to have both \nmembers of each pair provided for.",
            "citations": []
        },
        "FN32": {
            "text": "32. The appearance of the score will sometimes look \nstrange, and somehow “between the cracks,” to those thinking in 12-tone equal \ntemperament. Frequently chords appear as though they need re-enharmonizing. In \nreality, however, each note is completely pitch-specific and relates to a \nparticular key on the keyboard. Only the single black notes dividing the B/C and \nE/F pairs have alternative means of notation.",
            "citations": []
        }
    },
    "paragraphs": [
        {
            "0": {
                "text": "",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "1": {
                "text": "[1] In my previous two essays on Syntonic and Pythagorean \ntuning, numerous sound files were included together with graphic files showing \nin visual terms how the various notes in the scores were inflected upwards or \ndownwards in order to fine-tune the harmonies according to the principles \nexplained therein. The objective here is to show how Finale users can apply the \nsame principles and achieve similar results from their own use of Finale. (1) What will be included is a downloadable Library file that can be imported into \nFinale and used as described. When this is applied to scores in the way \nspecified, playback of files will be accurately tuned according to the user’s \nspecification. In the case of those who simply wish to apply the file provided, \nmuch of the essay can be bypassed. But since an understanding of the principles \nwill enable the application of other tuning systems (such as, for example, \nquarter-comma meantone), those who might wish to extend their use of tuning \nsystems should follow the essay closely. (2)",
                "footnotes": [
                    "FN1",
                    "FN2"
                ],
                "citations": []
            }
        },
        {
            "2": {
                "text": "[2] My own set-up is unremarkable: a Macintosh \niMac running OS 9, together with a still-serviceable Roland D10 keyboard. All \nthe principles and methods outlined in this essay equally apply to PC Windows or \nother Macintosh set-ups, and the downloadable files provided should work \nunhindered by any system using Finale from version 3.7.2 (Mac) onwards and \nequivalent PC Windows versions. Readers will find that a large screen is \nbeneficial (though not essential) when working with scores, and when reading \nsome of the graphic files contained in this essay. The files I have provided \nhave deliberately been created in Finale 3.7.2 for the following reason: while \nusers of later versions will find that their programs automatically apply the \nappropriate data transfer to these files, had I presented the items only in \ntheir newer formats users of early versions would be unable to apply the \nsettings. For this reason I shall present numeric values first according to the \nsystem understood by “older versions” (e.g. 3.7.2), and then explain how these \nvalues are modified by “newer versions” (e.g. Finale 2000 and Finale 2003). \nNobody using a newer version will, of course, ever have to work out the new \nvalues since the program itself does all the work. When the appropriate library \nin the downloaded file is Saved, all the changed values will be automatically \napplied by Finale when the file is loaded. Users of early versions also will be \nable to Save the library in its still unchanged format. They will find that if \nthey then Load this library (or any music file containing it) into a newer \nversion of Finale, the data transfer will be automatic.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "3": {
                "text": "[3] The keyboard that \nyou are using will undoubtedly be configured to play in equal temperament. (3) The only way in which pitches that are different from the default pitches (set \nby the keyboard used) can be generated is by activating the pitchwheel. The \npitchwheel will usually be set (by default) to raise or lower the pitch of a \nnote by one octave. (4) Casual (and even seasoned) users of Finale may be unaware \nof the power it offers for playback. There is more than one method of asking \nFinale to alter the pitch of a note it plays from the score, but the method that \nis to be used here is the most accurate and uses the Staff Expression tool. (5)",
                "footnotes": [
                    "FN3",
                    "FN4",
                    "FN5"
                ],
                "citations": []
            }
        },
        {
            "4": {
                "text": "[4] It will be helpful for you to know whether \nthe Finale version you are using is what I shall henceforward call an “early \nversion” as opposed to a “later version.” This knowledge will not affect your \nuse of the files provided, but will help you to follow some of the explanations \nI shall shortly be offering for using the program. Generally an “early version” \ncan be identified from the composition of the main tool palette. If it contains \nboth Staff and Score Expression icons (the former indicated by the “mf” symbol \nand a white note, the latter by an “mf” symbol alone), this will be an “early \nversion.” An example is illustrated in Figure 1 , as used in Finale 3.7.2. \nIf, \nhowever, your main tool palette contains only a single Expression Tool \n(indicated by an icon bearing only the “mf” symbol) you will be using a “later \nversion.” Such palettes are shown in Figures 2 (Finale 2000) and 3 (Finale \n2003). Figure 1 . Finale 3.7.2 main tool palette containing differing Expression Tools (click to enlarge) Figure 2 . Finale 2000 main tool palette (click to enlarge) Figure 3 . Finale 2003 main tool palette (click to enlarge)",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "5": {
                "text": "[5] The Expression tool (both “staff” and “score” in early versions) is normally \nused in order to insert dynamics into the score. It is important that when this \nmethod of tuning is used it is always applied to individual notes on a selected \nstaff. This will mean that users of early versions will select the Staff \nExpression Tool, while users of later versions will prescribe this from the \nsubmenus that appear after selecting the common Expression Tool. This will \nensure that the marking to be inserted only affects the actual note(s) to be \nchanged. In order at this stage to understand what is going to be done using \nthis tool to provide for pitch changes to individual notes, it will be helpful \nnow to load a Finale file in order to explore the (Staff) Expression tool in the \nmanner to be outlined next.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "6": {
                "text": "[6] USERS OF “LATER VERSIONS” SHOULD HERE SKIP TO \n[7] below. With a Finale file open, select the Staff Expression tool and click \non any note in the score to open the Staff Expression box. (6) There will be all \nthe current dynamic markings that are available, although these themselves are \nnot going to be used. Select any of those available and then click the EDIT \nbutton. The next box that opens should also contain a section headed “Playback \nOptions,” but if it does not simply click the button marked “Show Playback \nOptions.” In the “Playback Options” window that is now visible there is a \ndrop-down selection menu next to the word “Type” which allows the user to make \nvarious kinds of settings that affect playback. When the drop-down menu is \nopened the type to be selected is “Pitchwheel.” Having selected “Pitchwheel” \nthere is also a “Set to” radio button that should be selected. A numeric value \nnow needs to be inserted into the box alongside this “Set to” button. It is at \nthis point that a value can be inserted into the box to specify exactly what the \npitchbend value for the particular Staff Expression originally selected will be. \nThis value will determine the pitch inflection of the note to be sounded. (7)",
                "footnotes": [
                    "FN6",
                    "FN7"
                ],
                "citations": []
            }
        },
        {
            "7": {
                "text": "[7] USERS OF “OLDER VERSIONS” SHOULD SKIP TO [8] below. Later versions require \nthe selection of the common Expression Tool (“mf”). When a note in the \npreviously-opened score is selected the next window displays the current \nexpression marks. Select one, and then click “note attached” or “note \nexpression” (according to version). When the “Select” button is clicked, the \nnext window will present the playback options, and from the “Type” submenu \nshould be selected “pitchwheel.” A numeric value needs to be inserted into the \nadjoining box, and this value will determine the exact pitch inflection that \nFinale will apply on playback. Now click the various “Cancel” button to return \nto the score.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "8": {
                "text": "[8] The question is, of course, what should the pitchwheel “set \nto” values be? What is required is a completely new library of text expressions, \neach of which has a programmed pitchbend value that has been accurately created \nand inserted as described above. More specific understanding of the keyboard \npitchwheel and the way Finale operates it is needed, first of all, and then an \nunderstanding of how the values to be inserted are calculated. In older versions \nof Finale the default pitchwheel value is 8192; when the pitchwheel is at its \nlowest pitch (having been pushed to the left) Finale’s pitchwheel value is 0; \nand when the pitchwheel is at its highest point (being pushed to the right) \nFinale’s value is 16384 (i.e. 8192 multiplied by 2). The range in older versions \nis therefore 0-8192 and 8192-16384 (the former giving the range of pitches below the default, and the latter those above). In \nlater versions, however, these numbers have been changed, the default value now \nbeing set to 0 (zero), and the respective numeric ranges are therefore -8192-0 \nand 0-8192. (8) This means that Finale is capable of dividing the interval \ncovered by the pitchwheel (pushed either upwards or downwards) into 8192 equal \nportions. Although this may seem generous for tuning purposes, it is actually \ninsufficient for the purpose of accurate pitch changes as small as a Syntonic \ncomma as long as the pitch bend set on the keyboard covers a whole octave. (9) What is needed is the facility of splitting the interval of a semitone (rather than an octave) into this number of divisions. This will provide the \nfacility for generating pitches accurate to within 1 part in 8192 parts of one \nsemitone.",
                "footnotes": [
                    "FN8",
                    "FN9"
                ],
                "citations": []
            }
        },
        {
            "9": {
                "text": "[9] In order, therefore, to \nreduce the pitchbend range from an octave to a semitone, the bend setting needs \nchanging on the keyboard itself. Editing the bend value is simple but the \nprocedure depends upon the specification of the keyboard in use. (10) Whatever \nsounds (patches) are going to be used for playback from Finale need individually \nediting on the keyboard, and the bend value for each needs setting to “1.” (11) The accuracy that Finale will generate will therefore not be corrupted by \nincorrect bend settings within the keyboard itself.",
                "footnotes": [
                    "FN10",
                    "FN11"
                ],
                "citations": []
            }
        },
        {
            "10": {
                "text": "[10] \nWhat now needs to be provided is a Finale Text Expression file that in effect \nsignificantly increases the number of separate pitches available for each \noctave. The object is to create a tool that enables vocal performance to be \nsimulated, and this is something that was never available on keyboards of fixed \npitches. (12) Since each of the \ntwelve notes available on the keyboard now needs to be capable of delivering at \nleast three different pitches separated by a Syntonic comma, the Text Expression \nlibrary will need to provide for this. The default scale within which such pitch \ninflection occurs will, however, be purely Pythagorean since it is from these \nPythagorean pitches that comma inflection upwards or downwards has to take \nplace. So in addition to the pure Pythagorean intervals of the 4th, 5th and \noctave, pure 3rds and 6ths will be added to the system by the facility of \nmodifying as necessary standard Pythagorean pitches by comma inflection. The \nfirst stage in constructing this new library of pitches is therefore to devise \nthe values needed for the default Pythagorean scale. PYTHAGOREAN TUNING",
                "footnotes": [
                    "FN12"
                ],
                "citations": []
            }
        },
        {
            "11": {
                "text": "[11] I shall henceforward show \nnumeric values for both “older” and “later” versions of Finale as follows: \n“later versions” will appear in square brackets following the values for “older” \nversions. It will always be noted that the values of the former are the same as \nthose of the latter minus 8192 . (13)",
                "footnotes": [
                    "FN13"
                ],
                "citations": []
            }
        },
        {
            "12": {
                "text": "[12] In constructing the Pythagorean \nscale each existing note on the equally-tempered MIDI keyboard needs to be \nallotted an exact mathematical value such that when Finale plays a note with the \nvalue defined its pitch will be exactly the one required by the scale. In effect \nwhat this library will be doing is retuning the separate pitches of the scale so \nthat they will all have a Pythagorean relationship instead of an \nequally-tempered one. What needs to be calculated is the exact amount by which \neach separate note has to be raised or lowered from its equally-tempered default \nwhen it is played by Finale. These defaults will all have a pitchwheel value of \n8192 [0], (14) and the Pythagorean values will therefore be slightly more or less \nthan this value depending upon the position of the note within the scale. A \ncorrect way of arriving at exact Pythagorean values is to take a starting note \nwith the default value of 8192 [0], and then a) move upwards through a series of \nperfect fifths sharpwards, and b) move downwards through a corresponding chain \nof perfect fifths flatwards. Taking the note “C” as the starting point, the \nfirst deduction will move sharpwards through the fifths ending with A-sharp, while the \nsecond deduction will move from the same starting note flatwards through the \nfifths to end on C-flat. When this process has been completed all the “white \nnotes” will have their correct pitches, and all the “black notes” will exist \nwith two pitches separated by a Pythagorean comma. Sharps will thereby lie a \nmajor semitone higher than their parent naturals, and flats a major semitone \nlower than theirs. This will then provide for all the notes required by the \ncombined use of musica recta and musica ficta . The octave will have been \nprovided with 18 notes instead of the usual 12. As we shall see, however, 18 \nnotes to the octave will be too few to permit Just Intonation which additionally \nrequires the raising and lowering of these default Pythagorean notes by Syntonic \ncommas. But this is nonetheless the starting point for arriving at the required \nscale. (15)",
                "footnotes": [
                    "FN14",
                    "FN15"
                ],
                "citations": []
            }
        },
        {
            "13": {
                "text": "[13] To create \nprecise Pythagorean pitches for the scale, it must be remembered that the notes \nare initially set on the keyboard to Equal Temperament. As such each note in the \nscore will have a default Finale pitchwheel value of 8192 [0]. Only when this \nvalue is, for each separate note, raised or lowered by the exact value required \nwill the Pythagorean scale come into being. And it is only when this new scale \nhas been created that the addition or subtraction of comma values can be made \nwith precision. When this scale, together with the comma values to be applied to \nit, has been constructed, it will then be possible to edit scores by adding the \nprescribed playback Text Expressions and achieve a playback in Just Intonation. \nThe first task, therefore, is to construct an accurate Pythagorean scale.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "14": {
                "text": "[14] \nBecause the task is to create audible pitches rather than to calculate relative \nstring lengths, it is necessary to work in Cents rather than string length \nratios. (16) Since construction of \nthe Pythagorean scale is (as stated in [11] above) achieved by computing pure \nfifths in a chain upwards, and then downwards, it is therefore necessary to \ndefine the exact number of Cents required between successive notes that lie a \nfifth apart. Since we already know that by default each equally-tempered \nsemitone contains 100 Cents, and therefore that the equally-tempered fifth \ncontains 700 Cents, all we will need to do is to subtract 700 from the total \nnumber of Cents calculated for the interval overall to find the difference \nbetween the equally-tempered and the Pythagorean pitches of the note concerned. \nWe shall also need to convert Cents value into pitchwheel value which is very \nsimple: since the equally-tempered semitone (set on the keyboard) has a \npitchwheel range of 8192 (being either 0-8192 [-8192-0] or 8192-16384 [0-8192]), \nit must follow that each Cent has a pitchwheel value of 81.92. When, therefore, \nthe difference in Cents between an equally-tempered and a Pythagorean fifth is \ncalculated, the Cents difference needs to be multiplied by 81.92, and the result \nadded to (when moving upwards) or subtracted from (when moving downwards) the \ndefault pitchwheel value of 8192 [0]. This will yield the new pitchwheel value \nfor the note that now lies a Pythagorean fifth above or below the note from \nwhich the calculation was made.",
                "footnotes": [
                    "FN16"
                ],
                "citations": []
            }
        },
        {
            "15": {
                "text": "[15] All the new pitchwheel settings \ncan easily be calculated when the formula for conversion from string-length \nratio to Cents is applied. This formula is very simple: where the interval-ratio \nrequired is “i” and the Cents value sought is “c,” the conversion is achieved as \nfollows: c = log (i) * (1200/log (2)) By applying these principles to calculate \nthe pitchwheel setting for “G,” (17) and taking “C” as the starting point with a \nnormal pitchwheel setting of 8192 [0], the value for “G” will be arrived at as \nfollows: the pitchwheel value of C (8192 [0]) is the starting point; the \nnumber of Cents required to arrive at G is log(3:2) X 1200/log 2; the \ndifference between what G would have been (700 Cents greater than C) and what it \nnow is as the result of b) above, is the total Cents value given in b) minus 700 \n(the number of Cents it would have been); this difference is multiplied by \n81.92 (the pitchwheel value of each Cent); the result of d) above is added to \n8192 [0] (which would have been the default value). The complete formula for \nthis calculation is therefore as follows: FOR OLDER VERSIONS: 8192+(((log(3/2)) \n* ((1200/log(2))-700) * 81.92) = 8352. FOR LATER VERSIONS: 0+(((log(3/2)) * \n((1200/log(2))-700) * 81.92)=160 The pitchwheel setting for “G” is therefore \n8352 (older versions) or 160 (later versions). (18)",
                "footnotes": [
                    "FN17",
                    "FN18"
                ],
                "citations": []
            }
        },
        {
            "16": {
                "text": "[16] Having now determined the value of the first fifth in the chain sharpwards, \nthe same formula is applied each time the next fifth in the chain is calculated. \nThe only difference will be the starting value. When the G was calculated from \nthe C, the starting value was that for the C (8192 [0]). The result for the G \nwas 8352 [160], and this new result now becomes the starting point for \ncalculating the value for D using otherwise the same formula: OLDER \nVERSIONS: 8352+(((log(3/2)) * ((1200/log(2))-700) * 81.92) = 8512 LATER \nVERSIONS: 160+(((log(3/2)) * ((1200/log(2))-700) * 81.92) = 320 In then \ncalculating the value for A, the starting point will next be the new value for D \n(8512 [320]). This process simply continues through the fifths sharpwards as far \nas D-sharp.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "17": {
                "text": "[17] The pitches that remain are those to be calculated in the chain \nof fifths flatwards from the C. The formula is almost identical, and only the \nfirst operand differs (since the movement is now flatwards). The calculation for \nF will take the value of C as the starting point, and the formula will now be: OLDER VERSIONS: 8192-(((log(3/2)) * ((1200/log(2))-700) * 81.92) = 8032 LATER \nVERSIONS: 0-(((log(3/2)) * ((1200/log(2))-700) * 81.92) = -160 The old starting \nfigure for C (8192 [0]) is now replaced with the new one for F (8032 [-160]) to \nfind the value of B-flat. This process continues flatwards through the fifths \nuntil C-flat is reached. When this has been completed, the whole series of \nPythagorean pitchwheel settings will have been determined. These are now given \nbelow (the figures appearing in square brackets being those that apply to later \nversions of Finale, and being equivalent in purpose and function to those given \nfirst for older versions): C: 8192 [0] D: 8512 [320] E: 8832 [640] F: 8032 \n[-160] G: 8352 [160] A: 8672 [480] B: 8992 [800] B-flat: 7872 [-320] E-flat: \n7712 [-480] A-flat: 7552 [-640] D-flat: 7392 [-800] G-flat: 7232 [-960] C-flat: \n7072 [-1120] F-sharp: 9152 [960] C-sharp: 9312 [1120] G-sharp: 9472 [1280] D-sharp: 9632 [1440] A-sharp: 9792 [1600] Files created in early versions that \nare given the first values shown will, when loaded into later versions, have \nthese values automatically changed to those appearing in square brackets. When \ncreating new settings for early and late versions of Finale respectively, care \nmust be taken to ensure that the correct data set is used: older versions using \nthe pitchwheel range of 0-8192-16384, and later versions -8192-0-8192. There are \nconsequently 18 different pitches in this system for each octave.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "18": {
                "text": "[18] To create \nan accurate playback of these values, and achieve true Pythagorean tuning, the \nprocedures outlined in [5] to [7] above should now be followed. In the \nExpression window of Finale, it would be best to delete all existing expressions \n(unless you still to wish to use any of them, which is unlikely). For each \nPythagorean pitch it is necessary to Create a new Text Expression entry in which \nis applied a) a convenient name tag, and b) a playback definition in which “Pitchwheel” \nis selected from the drop-down menu and the appropriate value (in the list \nabove) typed into the box. The name tag is what will appear in your score when \nyou apply the appropriate Text Expression to each of the notes in turn, and it \nshould be kept clear and simple. The “white notes” can simply use the letter \nname (e.g. A, B, C etc.), and the flat notes can be supplied with a “b” after \nthe letter (e.g. Bb, Gb etc.). The sharps should not however use the hash sign \n(#) because this is reserved in Finale. (19) In this essay, and the supporting files, I have replaced the hash sign with “$,” \nso F-sharp is tagged as “F$.”",
                "footnotes": [
                    "FN19"
                ],
                "citations": []
            }
        },
        {
            "19": {
                "text": "[19] Once the new Text Expression library \ncontaining the Pythagorean playback values has been completed, each note in the \nscore will need to be supplied with its appropriate Text Expression tag. \nAlthough this is labor intensive, it is a labor of love! (20) It is absolutely \ncrucial, however, to make sure that each voice part is programmed by Finale to \nuse a different channel for playback otherwise cross-contamination of playback \nvalues will occur. (21) The same \nactual sound (patch) can be used with no ill effect, but different lines must \nremain assigned to different playback channels.",
                "footnotes": [
                    "FN20",
                    "FN21"
                ],
                "citations": []
            }
        },
        {
            "20": {
                "text": "[20] In order to illustrate the method of insertion to yield tuned playback, \nhere are provided some screen shots from three different versions of Finale. The \nmusic file used (the same in each case) was created by version 3.7.2 (the \nearliest of the examples) and has been loaded into each version to illustrate \nthe method of insertion. The first note in the highest staff is A, and the task \nin each case is to insert an instruction to play the note back at its \nPythagorean pitch. The music file already has all the Pythagorean values in its \nactive Expression Library (this note is programmed to use a pitch bend value of \n8672, as indicated in the list of figures in [17] above. Figure 4 shows the initial window provided by Finale 3.7.2. This window appeared \nbecause the Staff Expression icon in the left box was selected, and the first \nnote in the score was clicked. In this Selection window, the Staff Expression \n“A” has now been selected. To discover what its current settings are (and even \nto edit them) the “Edit . . . ” button will now be clicked. This now opens the Text \nExpression Designer window where it can be seen that the current setting is “Pitchwheel” \nset to “8672.” (22) This \nis shown in Figure 5 . Since this is correct, the various windows are now \nclosed by clicking on the appropriate “OK” or “Select” buttons, and the letter \n“A” now appears above the note in the score. When played back the pitch will be \nPythagorean A. Figure 4 . Staff Expression Selection window (version 3.7.2) (click to enlarge) Figure 5 . Text Expression Designer window (version 3.7.2) (click to enlarge) Figure 6 . Expression Selection window (Finale 2000) (click to enlarge)",
                "footnotes": [
                    "FN22"
                ],
                "citations": []
            }
        },
        {
            "21": {
                "text": "[21] In later versions, the methods are \nsimilar, but the Pitchwheel value for “A” that appears after the same file is \nloaded will now have been converted automatically to “480.” (23) Figures 6, 7 and \n8 are screen shots from Finale 2000. Figure 6 shows the primary Expression \nSelection window. The left box shows that the Expression Tool was selected (note \nthe absence now of the Staff Expression tool shown in Figure 4—choice \nfor insertion as “staff” or “score” expression appears in the next window), and \nthe Expression Selection box appeared because the first note in the score was \nclicked. The expression “A” has now been selected, and when the “Select” button \nis clicked a new “Measure-attached Expression Assignment” window appears. This \nis shown in Figure 7 . \nHere it is important to select “This Staff Only” (thereby making the expression \na “staff” one (as in version 3.7.2) rather than a “score” one. When the “OK” \nbutton is clicked, the expression “A” is inserted above the note, and whatever \nplayback value (if any) was given will be activated upon playback. To check what \nthe current settings are (and even to edit them if desired) the “Edit . . . ” button \nin the primary window (Figure 6) \nis selected. This now opens the Text Expression Designer window as shown in Figure 8 . Here it can be observed that the Pitchwheel setting is now \n“480” showing that Finale has updated the original value of “8672” and that the \nsetting is correct. Figure 7 . Measure-attached Expression Assignment window (Finale 2000) (click to enlarge) Figure 8 . Text Expression Designer window (Finale 2000) (click to enlarge)",
                "footnotes": [
                    "FN23"
                ],
                "citations": []
            }
        },
        {
            "22": {
                "text": "[22] Equivalent windows used in Finale \n2003 are shown in Figures 9 and 10 . The only obvious differences from Finale \n2000 are what might be viewed as “window dressing” differences. For example \n“Note attached” (version 2000) has now become “Note Expression” (version 2003), \nalthough the functions are identical. The Text Expression Designer window is \nidentical in function with its 2000 counterpart, and also shows—as \nexpected—that the Pitchwheel value stands now at “480.” Figure 9 . Expression Selection window (Finale 2003) (click to enlarge) Figure 10 . Text Expression Designer (Finale 2003) (click to enlarge)",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "23": {
                "text": "[23] Below are two downloadable Finale files (Example 1 and Example 2). Example 1: Josquin Desprez, Ave Maria (excerpt using equal \ntemperament)  [ Ex1.zip (for PC users)]  \n  [ Ex1.MUS.sit (for Mac users)] Example 2: Josquin Desprez, Ave Maria (excerpt using \nPythagorean tuning)  [ Ex2.zip (for PC users)]  \n  [ Ex2.MUS.sit (for Mac users)] The \nfirst is a straight file for playback using four separate channels, and the same \npatch number for each. You are advised to avoid using any “piano” sound because \nour ears are conditioned to assuming that anything sounding like a piano uses \nEqual Temperament. This might give the illusion that the piece is “out of tune” \nwhen it really is not. Select a melody instrument for playback through channels \n1, 2, 3 and 4 (a Recorder sound is ideal). The file will not change your \nkeyboard patch settings. This should give a normal playback using equal \ntemperament. The second is an edited version of the first, but now attaches to \neach note its Pythagorean playback values. The correct Expression library \n(detailed above) is embedded within the file, so it should simply play the music \ncorrectly. But the following checklist should first be made before trying it: CHECKLIST Have you reset your Pitchbend Range to a value of “1” on the \nkeyboard? Test the bender manually to ensure that it inflects upwards and \ndownwards by only a semitone for patches you will set for channels 1-4 (the \nsetting used for Examples 1 and 2). If this has not been done, you will quickly \nfind that comedy becomes tragedy! This setting must of course be applied to each \nand every patch you intend to use for playback. Before playing the file, open \nthe Instrument List window to ensure that your download has retained separate \nchannels for each staff. If not, you will have to assign these staves to \ndifferent channels using this window. You can, however, use the same patch \nnumber for each channel (having, as in a) above, verified the pitch bend setting \nas being “1”). Make sure that the “Send Patches before Play . . . ” box is \n  checked. SYNTONIC TUNING",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "24": {
                "text": "[24] As stated earlier, Syntonic tuning is \nonly an inflection of the Pythagorean scale in which Syntonic comma adjustment \nis applied to particular notes of the tetrachords. Potentially any note of the \nscale can be adjusted upwards or downwards by a comma depending upon its \ntetrachordal location and context. For this reason, each note of the Pythagorean \nscale needs to be provided with complementary values reflecting upward and \ndownward comma adjustment. Indeed this adjustment can sometimes be greater than \na single comma over the course of a whole piece, so what needs to be provided \nfor is two or three complementary values for each note sharpwards and flatwards. \nWhere an unavoidable accumulation of commas causes a composition to undergo an \naudibly significant and irreversible rise or fall in base pitch, the \nassumption should be that Syntonic tuning is the wrong soundscape for that piece \nand that Pythagorean tuning was intended by the composer. It is still advisable, \nhowever, to provide for a certain number of comma shifts either way, if only to \ntest the effect of Syntonic tuning in such cases and adjudge the impact of the \npitch change.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "25": {
                "text": "[25] The Syntonic comma is a fixed though non-melodic interval \nwhose ratio is 81:80. (24) As such it always gives the same quantifiable \ninflection when applied to an existing pitch. Whether the inflection is \nsharpwards or flatwards in no way changes its definition as a quantity. In order \nto calculate a pitchwheel value for the interval it must first be converted into \nCents, and then multiplied by 81.92 (the pitchwheel value for each Cent). \nConversion into Cents is via the normal formula for converting from an interval \nratio (i): LOG(i) * (1200/LOG(2)). Pitchwheel value now requires this to be \nmultiplied by 81.92, and the result is simultaneously added to or subtracted \nfrom the pitchwheel value of an already existing note. If, therefore, the \npitchwheel value of “C minus a Syntonic comma” is computed, the formula \n(starting from 8192 for the C) will be: 8192-(LOG(81/80) * (1200/LOG(2)) * 81.92 \n= 6430 The result of 6430 will therefore be set for pitches where C is to be \nlowered by a Syntonic comma. Were it to be raised by a Syntonic comma, the first \noperand would be changed to a “+”: 8192+(LOG(81/80) * (1200/LOG(2)) * 81.92 = \n9954. This new value of 9954 will consequently be set for notes where C is \nraised by a Syntonic comma. (25) Figure 11 . Pythagorean pitchwheel values with comma shifts (older versions) (click to enlarge) Figure 12 . Pythagorean pitchwheel values with comma shifts (later versions) (click to enlarge)",
                "footnotes": [
                    "FN24",
                    "FN25"
                ],
                "citations": []
            }
        },
        {
            "26": {
                "text": "[26] Charts plotting all the pitchwheel \nvalues of the Pythagorean scale, together with comma shifts upwards and \ndownwards, are most easily achieved by using a spreadsheet. Figures 11 and 12 show complete charts (Figure 11 for older versions, and Figure 12 for \nlater) plotting up to four comma shifts upwards and downwards. It is unlikely \nthat this number will be needed, let alone ever exceeded, although it can be \nextended if desired. The default value for C (8192 [0]) is the only simple \nnumeric entry contained in these spreadsheets. Every other value has been \nautomatically computed and generated by the insertion of formulae. What will be \nnoted is that all the values in Figure 12 are less—by a value of 8192—than the \ncorresponding values in Figure 11. In these the default Pythagorean pitchwheel value \nof each note is shown in column 2, and the remaining columns list the settings \nfor the comma shifts as indicated at the head of each column. These are the \nvalues that need to be programmed into the new Expression library either from \nFigure 11 or Figure 12 as appropriate.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "27": {
                "text": "[27] In creating a complete library of \nStaff Expressions to give accurate playback, as outlined above, the name tags \nneed to be simple and clear in order to indicate the exact inflections of each \nnote. For this purpose, the library encoded in Example 2 above contained all the \nPythagorean pitches and these are identified simply by the letter name of the \nnote concerned. Where there is a flat this is indicated by the “b” suffix (e.g. \nBb), but sharps are shown by the use of the suffix “$” (e.g. F$) for the reason \nstated in note 18 above. When this simple library is expanded so as to include \nall the upward and downward Syntonic comma inflections for every note, the tags \nneed to indicate the base notes as well as the exact inflections. The simplest \nmethod of displaying these attributes is to use the letter name of the note, an \noperand indicating upward or downward inflection (“+” or “-”) and a numeral \nshowing the number of comma values by which the note has been inflected. Thus \nthe tag “C-1” will indicate C lowered by a comma, “F$+2” the note F-sharp raised \nby two commas, and “Bb+1” the note B-flat raised by one comma. (26)",
                "footnotes": [
                    "FN26"
                ],
                "citations": []
            }
        },
        {
            "28": {
                "text": "[28] Example 3 below is a downloadable \nFinale file containing the complete active library of pitches displayed above in \nFigure 11. (27) Example \n3: Willaert, Sicut erat in principio from Vesper-Psalm 109  [ Ex3.zip (for PC users)]  [ Ex3.MUS.sit (for Mac users)] The score it displays has already been edited by the insertion of \nappropriate Staff Expressions in which is encoded the exact pitchwheel values \nfor playback. If you are sure that your keyboard is set to the appropriate Pitch \nBend value, and you have verified that the bend is only a semitone upwards and \ndownwards when the pitchwheel is activated, you can play the file back and it \nshould be finely tuned to work in Just Intonation (for which soundscape it was \nclearly designed and carefully controlled by the composer). Before playing it, \nmake sure that you have allotted appropriate patches to channels 1-4, and that \neach patch to be used has a pitch bend setting (on the keyboard) of “1.” In \norder to apply this library to other scores of your own, you should use the \n“Save Library . . . ” command, select the radio button for “Text Expressions,” and \ngive it a recognizable name (e.g. “Syntonic”). Once Saved, this library can then \nbe Opened from within any other file created and it will be immediately active. \nIf you intend to use it frequently for new scores, you could even create a \ntemplate to save time importing the file every time you need it.",
                "footnotes": [
                    "FN27"
                ],
                "citations": []
            }
        },
        {
            "29": {
                "text": "[29] This \nessay has not primarily been offered in order to increase an interest in or \nawareness of technology, though hopefully those readers who use technology will \nhave benefited from it in some way. The real purpose has rather been to \ndemonstrate that not only is it possible to know that the pitches being created \nare indeed those understood and used by early musicians, but also that in \nhearing them with this certain knowledge we can extend our cognitive experience \nand thereby achieve a much better understanding of the soundscapes that for too \nlong have remained obscure. Pitch, however, is only one part (even though an \nimportant one) of this soundscape. Furthermore an understanding of the ways in \nwhich these pitches can be recreated through simple technology does not in \nitself provide the musical understanding necessary to know where and how to \napply the pitches that can be generated. Only by the development of a meticulous \nand clinical approach to comma analysis can the perceptions this yields be \nrealized through the technology that has been created. POSTSCRIPT: Guillaume \nCosteley: Seigneur dieu ta pitié",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "30": {
                "text": "[30] This short postscript will offer a \ncuriosity that demonstrates again Finale’s power to provide superfine tunings. \nWhile many readers will be familiar with Guillaume Costeley’s spiritual chanson Seigneur dieu ta pitié , very few will ever have heard it rendered, as the \ncomposer prescribed in his Preface to the 1570 print, in 19-tone equal \ntemperament (19-tet). He there described the use of a keyboard upon which seven \nextra black keys were to be added. (28) The normal black keys were supplemented by a further seven, one lying alongside \neach existing one, and an extra one being added between B and C, and between E \nand F. In this system B-sharp was the same keyboard note as C-flat, and E-sharp \nthe same as F-flat. This resulted in nineteen separate notes to each octave, and \nCosteley prescribed that the interval between each successive note should be \none-third of a tone. Diatonic semitones are to be given the interval value of \ntwo-thirds of a tone.",
                "footnotes": [
                    "FN28"
                ],
                "citations": []
            }
        },
        {
            "31": {
                "text": "[31] It is clear from \nthis description that tones are smaller than standard. (29) It must also be the \ncase that minor thirds (equaling five thirds of a tone) are larger than the \nPythagorean minor thirds, and that major thirds (equaling four thirds of a \ntone) must be smaller than the Pythagorean ones. Thirds and sixths will \ntherefore be nearer to the JI intervals, while the fourths and fifths will be \nslightly dissonant. (30)",
                "footnotes": [
                    "FN29",
                    "FN30"
                ],
                "citations": []
            }
        },
        {
            "32": {
                "text": "[32] The programming of a playback for 19-tet is \nvery easy in Finale, since only twenty-one different values have to be provided \nfor (which is only three more than the Pythagorean scale required). (31) Since \nthe octave (1200 Cents) divides into nineteen portions, each one-third step must \nbe equal to 63.15789 Cents. When this scale is allotted Pitchwheel setting, the \nfollowing values will be found to be correct (again values for the later \nversions of Finale appearing in square brackets): C: 8192 [0] C-sharp: 5174 \n[-3018] D-flat 10348 [2156] D: 7330 [-862] D-sharp: 4312 [-3880] E-flat: 9485 \n[1293] E: 6467 [-1725] E-sharp: 3449 [-4743] F-flat: 11641 [3449] F: 8623 [431] F-sharp: 5605 [-2587] G-flat: 10779 [2587] G: 7761 [-431] G-sharp: 4743 [-3449] A-flat: 9917 [1725] A: 6898 [-1294] A-sharp: 3880 [-4312] B-flat: 9054 [862] B: \n6036 [-2156] B-sharp: 3018 [-5174] C-flat: 11210 [3018] Figure 13 . The 19-tet scale (click to enlarge and listen) When these values are \ncreated as playback data for the text expressions, a 19-note equally-tempered \nscale can be generated. Figure 13 shows such a scale together with the related \ntext expressions that have been configured in this way for playback. When the \naudio file provided is played, the exact effect of the scale can be heard and \neach step lies exactly one-third of a tone from its neighbor.",
                "footnotes": [
                    "FN31"
                ],
                "citations": []
            }
        },
        {
            "33": {
                "text": "[33] When these values are applied to the \nCosteley chanson, they provide a simple and striking opportunity to listen to \nthe piece according to the rare soundscape of 19-tone equal temperament. Figure 14 provides a score of the chanson (32) while the attached \naudio file provides \na 19-tone equally-tempered performance simulating an organ. Figure 14 . Guillaume Costeley’s spiritual chanson Signeur dieu ta pitié (click to enlarge and listen)",
                "footnotes": [
                    "FN32"
                ],
                "citations": []
            }
        }
    ],
    "mto": true,
    "category": "keynote address, twenty-sixth annual smt conference",
    "source": "mto/raw/mto.04.10.1.wibberley3.html",
    "data": "mto/data/mto.04.10.1.wibberley3.json"
}