{
    "title": "Multimedia for Music Study on the Web: Director from Macromedia",
    "date": "1997/09/01",
    "volume": "3",
    "issue": "5",
    "authors": [
        "Headlam, Dave"
    ],
    "abstract": "The advent of powerful, widely accessible, and financially viable personal computers with network connections on the World Wide Web has lead to exciting possibilities for creating musically meaningful presentations for teaching, performing, and researching music and disseminating them easily to colleagues, classes, or even to a potentially vast mass audience. These presentations can combine sound, images, animation, and interaction for stimulating and interesting results. The downsides of learning different programming languages, understanding Web page design and networking, dealing with multiple platforms (principally MacIntosh and Windows), and the problems of generating sound on different computers have a solution in the multimedia authoring program Director and its Web counterpart Shockwave, from Macromedia. This paper outlines the format of Director in its Web version with an emphasis on its potential for sound, and includes some demonstration files, and closes with some considerations of technique and content in web authoring for educational purposes.",
    "keywords": [
        "multimedia",
        "director",
        "web"
    ],
    "doi": "",
    "received": "",
    "pdf": "http://www.mtosmt.org/issues/mto.97.3.5/mto.97.3.5.headlam.pdf",
    "author_info": [
        {
            "name": "Dave Headlam",
            "university": "Eastman School of Music",
            "address": "26 Gibbs Street, Rochester, New York 14604",
            "email": "dhlm@theory.esm.rochester.edu"
        }
    ],
    "citations": {},
    "footnotes": {
        "FN1": {
            "text": "1. The author is here defined as the creator of the program or\nfile which is then utilized by the user.  The author puts the\nfile on a server computer, and the user accesses the file on a\nclient computer which is connected to the server in some way,\nmost likely via the internet. Computer programs such as word processors, webbrowsers, and\noperating systems are often designed with smaller programs in\nself-contained modules which can be added on easily.  For\ninstance, the MacIntosh operating system has system extensions and\ncontrol panels, Director has Xtras, and Netscape has plug-ins,\ncalled helpers in the Preferences menu.  These modules, put in an\nappointed folder, can be called upon when necessary to run\ncertain parts of the program or to recognize and run related\ntypes of programs.  Procedures made available by Xtras are called\nX-commands (Xcmd), and other names beginning with X.  Netscape’s\nplug-ins allow it to recognize file types, called Mime\n(Multipurpose Internet Mail Extensions) types, that are sent over\nthe internet.  Director’s web plug-in for Netscape is called\nShockwave. Web browsers are programs designed to recognize and display\ndifferent types of files, particularly Mime (Multipurpose\nInternet Mail Extensions) types, which are sent over the\ninternet.  Netscape Navigator is a well-known browser, that can\ndisplay text, images, and animations written in different codes,\nsuch as HTML (Hypertext Markup Language).  Browsers can be\nextended by plug-ins when new codes are introduced.",
            "citations": []
        },
        "FN2": {
            "text": "2. Computer-aided Instruction (CAI) programs have developed\nalong with personal computers.  Some existing programs are\nMacGamut, Practica Musica. Hypercard is a MacIntosh program using a stack of cards as the\nmetaphor.  The best known examples of its use are found in\nstudies of works such as Stravinksy’s Rite of Spring and\nBeethoven’s Ninth Symphony, as well as the more recent Ragtime,\nput out by the Voyager Company.  For recent examples of teaching\nuses, see the article by Elizabeth West Marvin and Alexander R.\nBrinkman in this issue of MTO.  See also the Voyager web site and\naccompanying software, CDLink, which allows for Hypercard Stacks\nonline. For some Web pages designed for interactive activities and\nteaching, see the following http://sparky.parmly.luc.edu/sharc for Greg Sandell’s timbre research, as well as http://locutus.esm.rochester.edu/~cscotto/jrt121/ by my\ncolleague, Ciro Scotto, as well as my own http://locutus.esm.rochester.edu/~dhlm/acoustic.html .",
            "citations": []
        },
        "FN3": {
            "text": "3. In the past on the Internet, a sound or other file had to\ndownload completely and then begin playing, which can take a\nlengthy period of time.  Streaming files are created with enough\ncontrol information put at the beginning of the file so that the\nfile can be processed and begin playing or presenting almost\nimmediately.  The remainder of the file continues to download\ninto a buffer simultaneously.  The problem is that download times\nare unpredictable on the Web and may change even during one\nfile’s download.  Thus, a sound may begin playing, then stop,\nwhile enough information flows into the buffer to continue the\nplay.  Director’s streaming audio allows authors to set the\ninitial time before the playing begins (default 5 seconds), which\nallows some leeway, but there is no fail-safe solution.",
            "citations": []
        },
        "FN4": {
            "text": "4. Soundwaves can be described digitally in a Cartesian graph\ntype format, with x-values as time, measured in small chunks\ncalled samples.  Samples of sounds are taken in fractions of\nseconds, usually in 1/22050 or 1/44100’s of a second, or 44,100\nsamples = 44,100 times a second.  The sample rate is twice the\nhighest frequency possible in the sound represented, thus 44,100\nsamples per second allows for a frequency of 22050 Hz, or cycles\nper second, above most people’s range of hearing; 22050 samples\nper second allows for 11025 Hz frequencies, within the range of\nhearing, but is acceptable as a compromise (the piano spans 27.4-\n4186 Hz). Computers store information in binary numbers, with each bit set\nto either 0 or 1, and in bytes of 8-bits each to store numbers or\nwords, etc:  8-bits = 1 byte, 16 bit = 2 bytes.  A kilobit (Kb) =\n1000 bits, a Kilobyte (KB) = 1000 bytes, a Megabyte (MB) =\n1,000,000 bytes.  In the Cartesian graph representation of a\nsoundfile, y-values are the amplitude levels, measured in\ndivisions relating to the bits; present in the sound\nrepresentation, usually 8 bits (=256 levels) or 16 bits (=16536\nlevels).  The sound wave is much more faithfully reproduced by\nthe many more levels in 16 bits, but for size reasons 8-bit sound\nhas been used on the Web.  The size of sound files (uncompressed)\ndepends on the bits and samples:  8 bits = 1 byte, so that 8 bit,\n22050 sample sound takes about 22 KB per second; CD quality\nstereo 16 bit, 44,100 sample sound takes 2 2 44,100 = about\n166.4 KB per second. An Analog-to-Digital converter converts a sound signal (trumpet\nnote, traffic noise) from its electrical representation into a\nseries of numbers representing the time and amplitude values of\nthe signal.  A Digital-to-Analog converter reverses the process,\ncreating sound from a series of binary numbers.",
            "citations": []
        },
        "FN5": {
            "text": "5. Midi file information can be found at http://www.eeb.ele.tue.nl/midi/index.html , but there are\nthousands of sites with MIDI files and info.  Mod file\ninformation can be found at: http://members.aol.com/Edgeman101/musica.html .",
            "citations": []
        },
        "FN6": {
            "text": "6. Information and downloads related to Quicktime 2.5 can be\nfound at: http://quicktime.apple.com .",
            "citations": []
        },
        "FN7": {
            "text": "7. Although useful by itself, Director may also be ordered in a\nStudio, bundled with a sound editing program, SoundEdit 16, an\nimage editor, xRes 3, and a 3D tool, Extreme 3D 2, for a complete\nmultimedia package.",
            "citations": []
        },
        "FN8": {
            "text": "8. In the original CD-ROM version of this movie, the sound is a\nquicktime movie, and can be accessed at any point, as well as\nstopped, started, and paused.  Director’s streaming audio\nunfortunately only allows for the latter.",
            "citations": []
        },
        "FN9": {
            "text": "9. In non-web uses, sounds can also be placed in the two sound\nchannels; when the movie plays the frame with the sound file in\nit, it will play the sound file.  To coordinate sound with\nanimation, it is easier to import the sound as a quicktime movie;\nquicktime movies can be controlled virtually frame by frame, and\nso a quicktime movie sound can also be started and stopped and\naccessed at any point easily to coordinate with animation.\nUnfortunately, this is not yet possible with linked quicktime\nsounds or Director’s streaming audio.",
            "citations": []
        },
        "FN10": {
            "text": "10. On servers, a file called “mime.type” (UNIX) contains many\nfile types; add the line:  application/x-director dcr, dir, dxr.",
            "citations": []
        },
        "FN11": {
            "text": "11. The standard system fonts:  Arial, Courier New, Symbol,\nTimes New Roman, and Wingdings on Windows and Chicago, Courier,\nGeneva, Helvetica, Monaco, New York, Palatino, Symbol, and Times\non the Macintosh.  If you choose a standard Macintosh system\nfont, Director automatically substitutes a standard Windows\nsystem font when someone runs the movie on a Windows\ncomputer--and vice versa.",
            "citations": []
        },
        "FN12": {
            "text": "12. Director has a few quirks that should be noted.  First, the\nfirst frame of a movie often doesn’t work properly when sounds or\nscripts are present, and it is best to begin in frame 2, leaving\nframe 1 either empty, or with the same stage as frame 2 without\nthe sounds, scripts, or markers, so that the movie begins and\npasses through at least one unscripted frame before the action\nbegins.  Second, the last frame of a movie needs to be considered\ncarefully, otherwise the movie will just end; often, the ;last;\nframe loops, waiting for a user click.  Third, repeat loops and\npauses shut out the user (and, in Web pages, the browser as well)\nand should be used carefully; options should be given to stop any\nlengthy activity.  Fourth, when using text, use ;field; cast\nmembers for general text but use a standard font, since client\ncomputers will only show fonts that they have mounted; for\nspecific fonts or text arrangements, use ;text; cast members,\nwhich are read as bitmaps.  Fifth, when done making a movie, it\nis often convenient to get rid of unused Cast members by opening\nthe Find command, which has a setting ;not used in movie.; The\nlist of members includes movie and frame scripts however, which\nmust be kept.  It is thus best to name these scripts to avoid a\ntedious search to be sure which cast members may be deleted.\nThere are also a few general quirks of computer programs to\nremember.  For instance, when using linked media, make the link\nto a copy of the image or sound, etc., because any changes made\nwithin, in this case, Director, will change the source media. For the best source on Director, go to http://www.macromedia.com/ , for music-related shockwave sites\ngo to http://www.teleport.com/~arcana/shockwave ; a few helpful\nbooks are:  Gary Rosenzweig, The Comprehensive Guide to Lingo (Ventana, 1996), and Cathy Clarke, Lee Swearingen, and David K.\nAnderson, Shocking the Web (Berkeley, CA:  Macromedia Press,\n1997).",
            "citations": []
        }
    },
    "paragraphs": [
        {
            "0": {
                "text": "1.  Introduction 2.  Educational and Research Writings on Music Using Computers 3.  Files on the Web: Quality, Quantity, and Convenience 4.  Sound on the Computer from the Web 5.  Web Authoring: Browsers and HTML 6.  Shockwave plug-in 7.  Director 8.  Music Analysis on the Web with Minimal Scripting: An Example 9.  Scripting 10. Teaching Music Theory: A Scripted Example 11. Streaming Audio 12. More on Shockwave: Web Programming 13. Conclusion 1. Introduction",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "1.1": {
                "text": "[1.1] With the advent of powerful, widely accessible, and\nfinancially viable personal computers with network connections on\nthe World Wide Web, musicians of widely varying interests are\npresented with an intriguing prospect:  the possibility of\ncreating musically meaningful presentations for teaching,\nperforming, and researching music and disseminating them easily\nto colleagues, classes, or even to a potentially vast mass\naudience.  These presentations can combine sound, images,\nanimation, and interaction for stimulating and interesting\nresults.  The frustrating downside to this picture is, of course,\nthe necessity of learning different programming languages,\nunderstanding Web page design and networking, dealing with\nmultiple platforms (principally MacIntosh and Windows), and,\nworst of all, solving the problems of generating sound on\ndifferent computers.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "1.2": {
                "text": "[1.2] Fortunately, a solution to these obstacles exists in the\nmultimedia authoring program Director and its Web counterpart\nShockwave, from Macromedia.  This program, currently at version\n6.0, is available in an educational form for around $300 and is\nwell worth the time and effort to learn.  In this paper, I will\noutline the format of Director in its Web version with an\nemphasis on its potential for sound, and include some\ndemonstration files.  I have used Director only on the Macintosh,\nand this article is written from that perspective, but the\nprogram exists in almost the same form in Windows versions, with\ndifferences noted clearly in the documentation.  The Web\ncompiler, Shockwave, allows authors to compile Director files for\nuse on the Web, and a Shockwave plug-in for Web browsers allows\nusers to access the Director program in a suitable format. (1) I\nhave used Shockwave only with the browser Netscape Navigator, but\nother browsers also support Shockwave. 2. Educational and Research Writings on Music Using Computers",
                "footnotes": [
                    "FN1"
                ],
                "citations": []
            }
        },
        {
            "2.1": {
                "text": "[2.1] The computer digital revolution is often compared to the\ndevelopment of the printing press in the 1500s.  The printing\npress allowed for wide dissemination of reading material as well\nas musical scores.  While books were illustrated, combining the\nvisual with the printed word, for musicians books and scores\nseparated the visual from the aural.  An educational industry has\ngrown up around attempts to recombine these two aspects, usually\nwith value placed on the ability to conjure sound from image\nusing internal musical production and by developing musical\nmemory.  The computer, however, allows authors to combine sound,\ntext, and images, thus creating a true musical book.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "2.2": {
                "text": "[2.2] Those who believe in the split between the visual and aural\nmight be skeptical of the computer’s sound production\ncapabilities, regarding them as a crutch similar to using a piano\nfor sight-singing or part-writing.  Those who regard it as a\nbenefit when the visual and aural are joined in a musical\nenvironment will find truly new uses for computers in musical\nproduction, education, and research.  The trick, I believe, is to\nuse the computer in ways that it is uniquely suited for, and not\nto translate books or musical scores into computer programs with\nthe same goals and perceived limitations.  Several interesting\nuses of computers, in Computer Aided Instruction (CAI) and with\nHypercard Stacks have and are emerging, as well as some\ninnovative Web page designs, and it is my hope that musicians\nwill be stimulated by this discussion of Director to keep\ndeveloping new tools and paradigms in this area. (2) 3. Files on the Web: Quality, Quantity, and Convenience",
                "footnotes": [
                    "FN2"
                ],
                "citations": []
            }
        },
        {
            "3.1": {
                "text": "[3.1] The first consideration for Web authoring is the tradeoff\nbetween the quality of the images or sound viewed and the\nquantity and size of files required.  These are in direct\nproportion:  the larger the file, the greater the amount of\ninformation, and the better the resulting quality.  However, on\nthe Web, quantity is also inversely proportional to download time\nand ease of use.  Thus, the larger the file, the longer is the\ntime it takes for the client computer to receive the information\nfrom the server, and the more taxing the requirements of the\ndownloaded file on the client computer in terms of memory and\nprocessing time.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "3.2": {
                "text": "[3.2] At least five solutions have arisen in response to this\nsituation:  1) use of small files with often ingenious solutions\nto the limitations and/or acceptance of a lower quality; 2)\ndevelopment of compression programs that allow files to be sent\nin a smaller, compressed form from the server and then be\nexpanded on the client computer; 3) breaking down of files into\nsmaller components that are downloaded on demand; 4) linking to\nexternal media such as images, sound, and video (instead of\ncopying them into a program so they are internal or inline), which\nare downloaded separately and on demand; and 5) streaming of\nfiles that only need to be partially downloaded before\nfunctioning, particularly with sound and video files, which tend\nto be large. (3) Director’s Web design incorporates all of these\nsolutions but allows for less reliance on the first solution than\nhas been the case on the Web. 4. Sound on the Computer from the Web",
                "footnotes": [
                    "FN3"
                ],
                "citations": []
            }
        },
        {
            "4.1": {
                "text": "[4.1] As those with experience creating or receiving sound on\npersonal computers from the Web can attest, it is often an\napparently chancy and unpredictable procedure.  Why is this the\ncase?  Transmitting images and texts on Web pages works almost\n100% of the time, but sound requires a few conditions be set.\nDirector’s Shockwave plug-in handles the sound playback\nrequirements for the most part, but it is useful to know a bit\nabout sound files on the Web to use sound efficiently. Example 1 (click to enlarge)",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "4.2": {
                "text": "[4.2] Sound files have several forms.  First, as relatively large\nfiles, they contain numbers that are representations of actual\nsound signals, carrying information about amplitude and time\ndimensions created from an Analog to Digital converter. (4) Sound files are in two sections, a header containing information\nrelating to the control and format of the data, and the data\nitself.  The header features control settings such as whether the\nsound is mono or stereo, what the maximum amplitude is, what the\nsample rate is, what the bit rate is, etc..  The remainder of the\nfile, the raw sound data, is interpreted according to the\nsettings in the header.  To hear the sound, the numbers must be\nfed into a Digital-to-Analog converter to convert numbers to\nelectrical signals that can be processed into sound, similarly to\na home stereo setup with a CD player.  This setup is included in\nmost computers sold within the last few years, which all have\nCD-ROMS, but the client computer and its browser must also have\nsome sort of program or plug-in to interpret the sound file\nproperly and link up with the computer’s sound hardware.  Using\nNetscape, useful plug-ins related to sound are Quicktime from\nApple ( Example 1 ), and LiveAudio; these programs can handle the\nusual .AIF (MacIntosh) and .WAV (Window) sound file formats, as\nwell as others.  Director has its own sound format, .SWA, which\nis incorporated into its Shockwave plug-in.",
                "footnotes": [
                    "FN4"
                ],
                "citations": []
            }
        },
        {
            "4.3": {
                "text": "[4.3] When discussing digital sound quality, reference is made to\nbits, bytes, and samples:  the more bits, bytes, and samples in\nthe representation, the better the sound quality and the larger\nthe file.  The standard Web sound quality, 8-bit and 22050 (or\nless) sample rate, is intolerable for musicians, but it is used\nbecause a mono sound file of 8-bit, 22050 samples (uncompressed)\ntakes about 22 Kilobytes (KB) per second or 1.3 Megabytes (MB)\nper minute, while a CD-quality stereo 16-bit, 44100 sample file\ntakes 166.4 KB per second or about 10 MB per minute in size.  A\nmono 16/44100 file, perfectly acceptable, is 88.2 KB/s or about 5\nMB/m, but a good compromise file size is mono 16/22050, which\nrequires 44 KB/s or 2.5 MB/m.  Even though sound files are\ncompressed, with ratios of 3:1 or 4:1 common, they are still\nrelatively large.  With download times of, on average:  1\nKB/second for a 14.4 Kilobit (Kb) modem, 3 KB/second for 28.8 Kb\nmodem, 5 KB/second for a 64 Kbs connection, and about 30\nKB/second for higher speed connections, such as the T1 connection\noften found in universities, sizes of sound files are a constant\nconsideration.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "4.4": {
                "text": "[4.4] To get sound files to a more manageable size, several\ncompression procedures are used, which cut down on the amount of\nnumbers used to represent the signal.  Audio compression is a\ncomplex topic beyond the bounds of this article, but Director and\nSound Edit 16 have a particularly good compression feature in\nShockwave Audio (discussed below), which allows for an acceptable\nquality of 16 bit/22050 sample, and provides for at least a 6:1\ncompression ratio (compressed file is 1/6 the size of the\noriginal).",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "4.5": {
                "text": "[4.5] Other common types of sound files are Midi (Musical\nInstrument Digital Interface) files, that contain no information\nabout the actual sound and so are quite compact, and files like\nMod files that contain mostly Midi-type information but also a\nfew sound samples. (5) Midi files have the advantage of being\nsmall, as they contain only information about frequency,\nduration, attack, articulation, etc.  The disadvantage is that\nthe resulting sound is entirely the result of the client computer\nsystem, which can be good or bad, depending on the prescence of\nsynthesized sound sources.  One useful development is the\ninclusion of a software synthesizer in Apple’s Quicktime 2.5, so\nthat Midi files can play directly through the MacIntosh’s Sound\nManager. (6) Director can use the same Midi tools as Apple’s\nHypercard, as part of its overall compatibility with Hypercard\nXcommands.  Mod files and others with a few sounds and lots of\ncontrol instructions have been staples of computer games for\nyears; they allow the author to control the resulting sound and\nhave small file sizes.  There is no record of Director uses of\nMod files, at least that I have found, but they might be useful\nwhen specific sounds are desired for extensive sounds. 5. Web authoring: Browsers and HTML",
                "footnotes": [
                    "FN5",
                    "FN6"
                ],
                "citations": []
            }
        },
        {
            "5.1": {
                "text": "[5.1] Web Browsers all read HTML (Hypertext Markup Language), a\nlanguage consisting of a simple set of controls over data.\nRather than include graphics and sound files within one file,\nHTML files include only instructions and text; other elements are\ncalled when needed from their resting places in the same folder\nas the HTML file.  With this architecture, HTML files can be\nquite small and thus transfer quickly over the internet.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "5.2": {
                "text": "[5.2] HTML is basically a labeling language, but has associated\nscripting and programming languages like CGI, Perl, Java, and\nJavaScript.  These allow for more complex interactions between\nthe browser and the file, and for more interesting Web pages than\nthe standard static page available with simple HTML commands.\nCurrently Java applets, small programs that are compiled and run\non the client computer, and Director Shockwave movies are the\nmost common applications used for creating Web pages that combine\nsound, image, animation, and text.  When, as is the case with\nDirector movies, files sent over the Internet have more complex\ncontrol sections, and use different proprietary command\nstructures, the browser may need plug-ins to run or display them.\nDirector’s plug-in is called Shockwave; by using Shockwave from\nwithin Director, self-contained file is created which consists of\ncontrols and resources (such as images, movies, etc.)  that are\neither placed within the file or are outside and are called when\nrequired (like HTML).  The Director movie is called from within\nan HTML file using an EMBED command (described below).  Linked\nsounds (.SWA files) and images (.GIF files) do not require a\nseparate HTML file, but currently linked video must be called\nfrom within a separate HTML file.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "5.3": {
                "text": "[5.3] Readers running Netscape should look at their plug-ins.  Go\nto the Finder and look inside the Netscape folder for\nthe plug-ins folder and look inside at the plug-in programs\navailable (Example 1 above).  You will probably see Quicktime and\nLiveAudio—other plug-ins may be downloaded from various places\non the Web.  In the next section of this paper, you will put the Shockwave \nplug-in this folder.  Back to Netscape.  In Netscape,\nopen up Options; then General Preferences, and\nthen helpers ( Example 2 ).  A list of helper applications that\ncall plug-in programs appears; it will probably also include\nQuicktime and LiveAudio.  Click on one plug-in line and then edit\nto see the details ( Example 3 ):  the code names for the\napplication and the file extensions or suffixes, such as .mid for\nMidi files and .dcr, .dir, .dxr for Director.  These extensions\nare very important, as they tell the browser what type of file\nneeds to be interpreted. Example 2 (click to enlarge) Example 3 (click to enlarge) 6. Shockwave plug-in",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "6.1": {
                "text": "[6.1] Director’s plug-in is called Shockwave, and it is used to\ninterpret the control codes of Shockwave files, which are\nidentified with .dcr suffixes.  Before continuing with this\narticle, the reader should get a shockwave plug-in and install\nit.  Go to this URL address: http://www.macromedia.com/shockwave/download and download the\nplug-in, following instructions.  Another address, http://www.macromedia.com/support/shockwave , has answers to\nquestions.  The plug-in and supporting files come in a compressed\nform and require Stuff-it Expander to expand.  If you have this\nprogram, it will expand the file automatically (or you may have\nto double-click on the downloaded file).  An installer program\nwill appear; quit the browser and double-click on it to install\nthe Shockwave plug-ins.  Start up Netscape, and set the .dcr type\nin Options:  General Preferences:  Helpers:  New (Example 3).  If\nyou don’t have Stuff-it Expander, there is a Catch-22 because\nStuff-it Expander itself is often presented for download in a\ncompressed state.  Here are two addresses to help getting\nStuff-it Expander: http://www.aladdinsys.com/consumer/expander2.html , and http://www.aladdinsys.com/support/faqs/mexp2.html .",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "6.2": {
                "text": "[6.2] You will need to restart Netscape, but first increase the\namount of memory ( Example 4 ) that Netscape allots, since the\nprogram will now have to open up Director movies as well.  Set\nthe memory to at least 15000 KB (15 MB).  Restart Netscape.  Go\nto the Options folder and increase the cache size to at least 10\nMB ( Example 5 ).  Finally, if you haven’t already, extend the\nwindow to the right so that it is as wide as your screen.  The\naccompanying movies to the rest of this article will appear in a\nnew upper window which you can move around to be able to see the\ncorresponding text while you look at the movie or image. Example 4 (click to enlarge) Example 5 (click to enlarge) 7. Director Example 6 (click to watch video)",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "7.1": {
                "text": "[7.1] Director, as the name implies, uses the metaphor of a movie\nfor file creation. (7) A director movie that is itself an\nintroduction to Director is provided in Example 6 .  Go through the movie\nand refer to it for the following.  Each element in the movie, an\nimage, text, sound, or video, is called a cast member; when it\nsits in reserve in a cast library; and a sprite; when it is\nactually onstage;—the screen space allotted for the movie—and\npart of the action.  The sprite corresponding to a cast member is\nindependent and can be altered in many aspects (size, color,\netc.), without affecting the original cast member, which acts as\na template.  Up to 32,000 cast members can be ready for use in a\nmovie (using linked libraries), with up to 120 sprites possible\non the stage at one time.  Successive events—combinations of\nsprites—happen in frames; placed within a score; which controls\nthe action.  Each element, the frame, the score, the sprites, and\ncast members, can all have scripts or sets of commands associated\nwith them, activated automatically within the movie or by the\nuser.  Pre-set scripts called behaviors; are included, but these\ncan be altered and new scripts written.  The user interacts by\nclicking on sprites, which can be buttons or hot; spots; as with\nWeb pages, it is possible to indicate to the user where to click\nby changing the cursor to a hand; at those places.",
                "footnotes": [
                    "FN7"
                ],
                "citations": []
            }
        },
        {
            "7.2": {
                "text": "[7.2] Director’s design gives the author a choice of two levels\nfor creating presentations:  1) using prepared scripts\ncalled behaviors; and 2) writing new scripts.  Script is a general\nterm denoting a programming language that is created to use\ncommon language references, such asset the text of castmember ‘x’\nto ‘I love ice cream,’ rather than the more complex allotment of\nvariables, types, and memory locations found in C or C++ or other\nsimilar programs.  While easier to use than programming\nlanguages, scripting retains certain features, such as “if then .\n.  ”; and “while” loop constructions, and the ancestor - parent -\nchild metaphor of object-oriented programs.  Director’s\nprogramming language is called Lingo.  The standardized behavior\nscripts allow for application of scripts and interaction without\nindependent programming, but those interested in programming can\nadd their own scripts to govern the actions of sprites, etc.  in\nthe course of the movie.  Since the behavior scripts have only\nappeared in the latest version of Director, 6.0, anyone who has\nused Director has already learned scripting, which was required\nof the author in earlier versions. Example 7 (click to watch video)",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "7.3": {
                "text": "[7.3] Movies with behavior scripts only are generally created\nmanually, using the changing relationships of sprites in the flow\nof frames implied in the movie metaphor.  Cast members—images,\ntext, etc.—are either imported or created within Director, using\nits Paint and Field tools, and put in a list of cast members,\nthen dragged and arranged on a stage as sprites.  Successive\nmovie frames; are similarly arranged, with a few behavior scripts\nto create animations.  The introductory movie shown above has few\nscripts, consisting mostly of 1) “wait” type commands, which\nstops the movie by causing it to replay the same frame until the\nuser clicks; and 2) “go to” type commands that send the movie to\na different frame when the user clicks.  Another movie (see Example 7 ) with\nminimal scripting is one I created for a multi-media class at\nEastman, with general information on computers and multi-media.\nThe only scripts are “go to” types and “wait until user does\nsomething” types.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "7.4": {
                "text": "[7.4] When the movie is run, the frames run sequentially at\nspeeds of 1 to 30 frames per second, allowing for animation or\nsequences of events similar to a movie reel.  In frame-by-frame\nanimation (see Example 8 ), the frame succession is clear when the tempo, or frame\nrate, of the movie is slowed.  Frames can be looped to wait for\nuser-activated buttons or hot; spots:  these interactive elements\nallow the user to jump around between frames and control the pace\nor order of the movie, depending on its design.  A simple\ninteractive movie (see Example 9 ) allows users to alternate between images.\nSimple movies with animation are small, easy to create and\ncompile, and can be found in many places on the Web. Example 8 (click to watch video) Example 9 (click to watch video) 8. Music Analysis on the Web with minimal Scripting: An Example Example 10 (click to watch video)",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "8.1": {
                "text": "[8.1] As a simple example of music analysis using a Director\nmovie with minimal scripting, I offer a study of Los muertos\nillvan alas de musgo, a madrigal by George Crumb (see Example 10 ).  The Director\nmovie of this analysis was created with 1) a Finale file of the\nscore, which was imported into Director as the notes only, and\nthe staves only, the two are combined in the movie, but having\nthem as separate cast members allows for manipulations (such as\ncoloring) on the notes alone; 2) colored cast members taken from\nthe notes cast member; 3) a separate analytical stave; and 4) a\nsound file of the song, in this case a performance conducted by\nthe author.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "8.2": {
                "text": "[8.2] The tricky part was to get the scrolling of the score to\ncoincide with the music:  the corresponding cast members of the\nscore and notes were lined up and placed in successive frames on\nthe stage to line up approximately with the flow of the music.\nAs the score scrolls by, colored cast members are placed on the\nscore, then moved up to the analytical layer to show the analysis\ndevelop in real time.  The advantage is that the harmonies\n(pitch-class sets) are coordinated with colors, and that the\nstudent can listen to the score and start, stop, and pause the\nmusic and score for study. (8) The scripts are minimal for this\nmovie, which is based on the frame-by-frame succession that is\nthe essence of Director movies, and consist only of restart and\npause controls, which are toggled when the user clicks on the\nstage, and the stop/restart button on the stage. 9. Scripting",
                "footnotes": [
                    "FN8"
                ],
                "citations": []
            }
        },
        {
            "9.1": {
                "text": "[9.1] Scripted movies have the advantage that a small number of\nelements may be manipulated in different ways by controls in the\nscript, so that the size of the file is smaller than if the\nelements were copies and manipulated manually.  Director’s\nlanguage, Lingo, is somewhat similar to Hypercard’s Hyperscript\nand has features found in many scripting languages.  Every\nelement of a movie has a controlling script which may be defined\nusing program handlers that begin with the word on:  from the\nmovie itself (on startMovie), to frames (on enterFrame, on\nexitFrame), to cast members, sprites, and interactive buttons and\nhot spots (on mouseUp, on mouseDown).  In addition to the program\nhandlers provided within Director, users may write their own\nhandlers, which are similar to functions in programs like C and\nPascal, and either perform a task or take a value, change it, and\nreturn a value.  Variables may used locally, or defined as global\nand used in different handlers.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "9.2": {
                "text": "[9.2] The script of Lingo can be divided into at least nine\ncategories:  1) decision scripts:  mathematical symbols, numbers,\noperators such as = or <> (not equals); “if - then — else if -\nthen — else” loops; “repeat while” or “repeat with” loops; 2)\nfunction scripts:  handlers which perform a task, or take a\nvalue, perform an operation, and return a value; 3)\nclassification scripts:  define local variables, global\nvariables, lists, put and set commands which assign values; 4)\ncontrol and program handler scripts:  scripts that run the\nprogram and connect with the computer, such as abort, exit,\nstart, alert, mouseDown, KeyDown, button scripts, menus, sorts;\n5) location scripts:  setting the location of sprites; on the\nstage:  top, bottom, right, left, location of mouse when clicking\non stage; 6) attributes scripts:  setting other attributes of\nelements than location:  color, blend, height, number, name,\ntype; 7) text-related scripts:  identifying characters, words,\nlines, whether text field is editable by user, length; 8)\nconnection scripts:  connecting to other programs, files, desk\naccessories, resedit manipulations, Xlibraries, File Input/Output\n(I/O), etc.; 9) creation scripts:  object-oriented programming\nelements:  ancestors, parents, children; 10) Web and\nnetwork-related scripts:  controlling Web and networking\nfeatures. 10. Teaching Music Theory with Director: A Scripted Example Example 11 (click to watch video) Example 12 (click to watch video) Example 13 (click to watch video)",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "10.1": {
                "text": "[10.1] A typical freshman homework assignment using a scripted\nDirector movie is given (see Example 11 ), with the first eight bars of Schubert’s\nMoment Musicale op.  94/6 as the passage.  The movie involves \n1) the use of a notation program such as Finale to notate the\nmusical passage, a reduction of the passage as the answer (if\ndesired), and a blank stave of the same size as the reduction for\nthe students to enter their answers to a counterpoint-type\nquestion; 2) a Roman Numeral, Arabic number, and note head\nrepository for analysis; 3) color flags and text field to label\nnon-chord tones; and 4) a sound file of the passage, the movie\nincludes a sound file of the outer voices for the answer.  For\nthe first question, the passage appears on the stage, and the\nstudent can first listen to the passage, then arrange Roman\nNumerals and Arabic numbers in the proper place, and then move\ncolor flags over non-chord tones and label them.  For the second\nquestion, on a blank stave, the student can arrange notes and\nnumbers to show underlying counterpoint and/or a reduction of the\nharmonies.  When done, if desired, the student can check the\nanswer.  To hand the assignment in, the student makes snapshots\nof the screen (command-shift-3 with any Macintosh after Operating\nSystem 7.01) showing the answer to question 1 then question 2;\nthe snapshot saves a picture of the screen as a PICT file to the\ndesktop.  The student then labels the two pictures with his/her\nname, and puts them in a homework folder.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "10.2": {
                "text": "[10.2] A non-working version of the movie showing the separate\nelements is included (see Example 12 ).  To create the movie, the main cast\nmembers, the score and staves, are exported from Finale as PICT\nfiles (an image format that Director supports).  First, import\nthe files into Director as cast members, and size the stage at\n432 X 455 pixels (for a 17 inch monitor, 464 X 310 for 15 inch).\nFor Question 1, put the notation cast member on the stage.  To\ncreate the Roman numeral, Arabic number, and note repository, use\nfields and type in the numerals and numbers, but use texts for\nthe quarter note heads and sharp, natural, and flat signs (using\na font like Petrucci).  Fields are more flexible, but require\nthat the user has the same fonts as the author—so they should be\nset up so that the font doesn’t really matter; texts are treated\nlike bitmap images so the user won’t need the Petrucci or other\nnotational font.  To complete the cast, using the Paint tool,\nmake a small colored circle to use for non-chord tones.  Arrange\nthe Roman Numerals and Figures and symbols on the stage.  For\neach sprite, check the moveable box so that the user can move the\nsymbol.  Create a field for the student to add the names of\nnon-chord tones, and fields explaining what the student is to do.\nFinally, add navigational buttons, to move to different frames.\nWhen allowing for interaction, use “go to the frame” in the frame\nscript, as this allows the movie to keep running and accepting\nmouse clicks etc. (the use of “pause” stops the movie).  For\nQuestion 2 and the answer, follow a similar procedure.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "10.3": {
                "text": "[10.3] A working version of the movie showing its scripts is also\nincluded (see Example 13 )—the main movie script is given in the top right hand\nfield, changing scripts according to what sprite is clicked are\ngiven in the lower right field.  These fields may be moved by\ndragging with the mouse.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "10.4": {
                "text": "[10.4] When scripting a movie, it is easiest to place all handlers\nin “Movie” scripts, under a general global line, so that the\nglobal variables are available to all handlers, with calls to the\nhandlers in the scripts of the various corresponding sprites,\nframes, etc.  This avoids the common problem of undefined global\nvariables—a situation which causes errors not always clearly\narticulated by Director’s automatic de-bugging features.\nThe Movie script; sets up several groups of variables, beginning\nwith IH, IIH, etc., which are variables set to the initial\nlocations of many sprites (necessary for the script when they\nmove and recreate themselves as the user performs the analysis).\nThe next variables (scroll down in the upper right hand box to\nsee these) are for two lists, then for counters also used in the\nmove/recreate scripts.  Global variables for the sound follow.\nThe “on startMovie” handler sets up the initial values for\nlocations and counter global variables.  It also initially sets\nall sprites visible, as some are made invisible in the course of\nthe movie, but toward the end another handler called\n“nonvissprites1” makes the sprites corresponding to question 2\ninvisible, since the user will presumably start with question 1.\n(If the user goes to question 2 first, a script along the way\nwill make the relevant sprites visible.)  It also erases all cast\nmembers past a certain number:  this is the number of functioning\ncast members, until users start to perform the analyses, then\nmore cast members are created.  Every time the movie is\nrestarted, the excess cast members are deleted.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "10.5": {
                "text": "[10.5] The essential script for all the moving sprites (the roman\nnumerals, etc.)  is “dupandmove,” placed within the movie script.\nMove one of the Roman Numerals to show this script, then look in\nthe lower right field.  The “if ..  then” script is a test:  if\nthe sprite has been moved from its original location, then it\nwill not duplicate itself; this is so that users can adjust the\nRoman Numerals, etc.  they have already placed in the score.  If\nthe sprite has not been moved, then the handler “dupandmove” is\ninvoked.  This script, shown in the upper right hand field,\nduplicates the cast member corresponding to the sprite, assigning\nthe duplicate all the attributes of the original (all the “set\nthe” lines in the script) so that there is an apparently endless\nsupply of numerals and figures.  In fact, the duplicate replaces\na dummy sprite that is sitting unnoticed on the stage, starting\nwith sprite 120 and moving backwards by the incremented value of\na counter variable x.  There is a total of 120-(the number of\nfunctioning cast members) of these dummy sprites, allowing for\naround 60 copies of the Roman Numerals, etc.  The script places\nthe duplicate at the same place as the original, while the\noriginal is free to move away.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "10.6": {
                "text": "[10.6] The trick in the script is to duplicate the cast member\n(the Roman numeral, etc.)  only the first time the sprite is\nclicked—after it is moved, the user should be able to move it\nagain without creating another duplicate.  As noted above, this\nis the purpose of the location test beginning the script in each\nof these moving sprites, as seen in the lower field on the stage.\nIf the sprite is at the original location, it will create a\nduplicate; if it has been moved once, it will not.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "10.7": {
                "text": "[10.7] The handler “dupandmove” also includes “puppetSprite”\ncommands.  To alter the condition of a sprite from the script, it\nis necessary to use a “puppetSprite spriteNumber, TRUE or FALSE”\ncommand.  All elements, sounds, transitions, palettes, etc.  may\nbe changed with Lingo, with the corresponding ‘puppet command\n(“puppetSound,” etc.).  When changing any sprite attributes, it\nis also necessary to end the handler with “upDateStage” or to use\n“go to the frame” in the frame script to register the\nchange—this movie uses the latter.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "10.8": {
                "text": "[10.8] A problem with the “puppet” commands within Director lead\nto the “visible” sprite handlers, “vissprites” and\n“nonvissprites.”  To see these handlers, click on one of the\nnavigation buttons:  “question 2” or “Answer.”  A channel or\nsprite that is puppeted will persist on the stage even when it is\nnot in the score; thus, it needs to be made invisible when not\nrequired.  The “vissprites” and “nonvissprites” handlers set the\nsprites corresponding to question 1 visible or invisible, while\nthe “vissprites1” and “nonvissprites1” handlers set the\nvisibility of sprites corresponding to question 2.  Two lists are\ncreated to catalogue the sprites from these two questions:\nQ1List and Q2List.  At the end of the “dupandmove” handler, the\nduplicated sprite number is put into the corresponding list, and\nthe numbers in the list are used in the “visible” handlers.\nThese handlers also include the sprite numbers corresponding to\nthe original movable sprites (the Roman numerals, etc.), which\nalso must be made visible or invisible, since they are also\npuppeted. 11. Streaming Audio",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "11.1": {
                "text": "[11.1] Director movies may also include sound files. (9) With\nDirector on the Web as Shockwave, having relatively large sound\nfiles embedded in the program causes slow download problems.  One\nsolution is to use Macromedia’s streaming audio format, which\ncomes with an efficient compression of at least 6:1.  Using this\ncompression, sound files embedded in the movie are smaller, and\ncan be used normally.  When files are still quite large, it is\nalso possible to link to external sound files and play them\nduring the movie.  This is the technique in the assignment\nanalysis movie:  the sound is played with the “Listen” button,\nwhich activates a specially prepared compressed sound file,\n“schubert.swa,” that sits outside the movie and is called when\nneeded.  The handler is set in the movie script, and the sound is\ncalled by the button script, with the handler “playswa.”  With\nthis streaming audio, a buffer is created and the downloading\nsound file is played when the buffer is full, generally about 5\nseconds.  As the file continues to download, it simultaneously\nplays.",
                "footnotes": [
                    "FN9"
                ],
                "citations": []
            }
        },
        {
            "11.2": {
                "text": "[11.2] Returning to the homework assignment, to complete the\nsteps for creating the movie, prepare a sound file of the\npassage, using a program like Sound-Edit 16 (also made by\nMacromedia), to create a mono file, 16-bit and 22050 samples.\nUse the SWA Compression Xtra in Soundedit and the SWA Settings\nXtra for Director to compress the sound.  The sound is given a\ncorresponding dummy cast member, called “SWAHolder,” and the name\nof the sound file is assigned in the “on startMovie” handler.\nThe sound handlers then take this sound file and play it, with a\nfew configuration features.  The sound can be heard any number of\ntimes by pressing the corresponding button.  A second sound in\nthis example is a reduction to the two outer voices.  Both of\nthese sounds were created first as Midi files, then altered to\n.AIF format sound files using Quicktime’s MoviePlayer, then Sound\nEdit 16 to change the sounds into compressed .SWA files. 12. More on Shockwave: Web Programming.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "12.1": {
                "text": "[12.1] Shockwave, both a process and plug-in for putting Director\nmovies on the Web, was introduced in October 1995, and is\navailable for Windows or Macintosh computers, and for Web\nbrowsers Netscape Navigator and Microsoft Internet Explorer.\nSince Shockwave introduces a new MIME type, .DCR, the server must\nbe configured, and the client browser must be configured with the\nplug-in and helper type (as discussed above). (10) To create\nShockwave movies, Director uses Xtras contained in folders called\n“media,” which contain Xtras related to streaming audio, and net\nsupport, which contain Xtras related to Shockwave movies on the\nWeb.  Director 5.0 had an Xtra called “Afterburner” to create\nshocked movies, but Director 6 has a built-in “Create Shockwave\nMovies” choice in the file menu, which creates a file ending with\n.DCR.  Shocked movies are placed within HTML documents.  The\nbasic EMBED tag is:  <EMBED SRC=“movieName.drc”\nWIDTH=widthInPixels HEIGHT=heightInPixels>.",
                "footnotes": [
                    "FN10"
                ],
                "citations": []
            }
        },
        {
            "12.2": {
                "text": "[12.2] The first rule of Web programming with Shockwave is to\nstart with the smallest movie possible:  if the movie is large,\ndivide it into smaller movies that call one another, or begin\nwith an introductory movie that consists of only an image which\ndisplays while other movies load (using the “GoToNetMovie”\nscript).  The second rule is be clear on pathnames and file\nnames.  Director’s lingo, the pathName, is disabled in Shockwave,\nand the movie and supporting files all need to be in the same\nfolder or directory and properly labelled.  Files names have\ndifferent restrictions on different platforms:  UNIX servers are\ncase-sensitive; Windows machines may have trouble with names\nlonger than eight characters with a three character extension or\nnames with spaces.  These two and MacIntosh may have trouble with\nspecial characters in file names.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "12.3": {
                "text": "[12.3] As with sound, color and graphics are complex topics unto\nthemselves when it comes to size, quality, and compression.  The\nsafest route is to use the System Color Palettes and the smallest\nbit size for images that provides a clear image:  the difference\nbetween 8 bit and 16 bit color is noticeable, but the former is\nacceptable.  Use text fields if possible, with standard fonts:\nthe client computer must have the same fonts to get the same text\nshape and size. (11) Director automatically substitutes between\nstandard MacIntosh and Windows fonts.  Text created in the text\ncast members is bitmapped and takes more space, but the client\ndoes not need the same fonts, and so the effect can be assured.",
                "footnotes": [
                    "FN11"
                ],
                "citations": []
            }
        },
        {
            "12.4": {
                "text": "[12.4] When putting Director movies into shocked form on the Web,\nimportant considerations are:  1) data transmission rates; 2) New\nLingo commands; 3) Director features disabled; and 4)\nmiscellaneous issues that affect playing Director movies in a\nbrowser.  Data transmission on the Web is, from a hardware point\nof view, standardized, with user modem speeds of 14.4 kilobits\n(Kb) per second (= 1.8 KB/s), 28.8 Kb/s (3.6 KB/s), 33.6 Kb/s\n(4.2 KB/s), and 56 Kb/s (7 KB/s).  Higher speeds come from ISDN\nlines, ranging from 64 Kb/s (8 KB/s) to 1.5 Megabits (Mb)/s (184\nKB/s), and T1 lines at 1.544 Mb/s (193 KB/s), Ethernet at 10 Mb/s\n(1.25 MegaBytes (MB)/s), and T3 lines at 44.736 Mb/s (5.592\nMB/s).  Over the internet, however, these theoretical speeds are\naffected by the data transmission capacity of server computers\nand by how busy the server and the lines between server and\nclient are at that moment—a very unpredictable value.  A given\nspeed estimate for general use is about 1 KB/s.  By taking the\nsize of the movie and supporting files, approximate download\ntimes can be calculated.  The most important advances for data\ntransmission are streaming versions of data:  Shocked movies and\naudio are both streaming, but streaming video is not incorporated\ninto Director, although Quicktime movies, which are linked to\nfrom within shocked movies, are now streaming.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "12.5": {
                "text": "[12.5] Other concerns to users of Director are the features not\navailable in Shockwave form, and the new Lingo scripts required\nby Net form.  Features not available are mostly those related to\noperating systems:  custom menus, printing, saving, restarting,\nresources, file I/O etc., but also include movies within windows.\nThe Web-related Lingo commands are in three categories:  those\nthat start a process, those that monitor it, and those that send\nor receive a result once the process is done.  This three-step\nset-up accommodates the essentially asynchronous Internet, where\nthe time to send and receive data is unpredictable.  Finally, a\nconcern at all times on computers is the amount of free memory:\nShocked movies on top of Web Browsers take up enormous resources,\nand the use of multimedia files can easily (on the MacIntosh at\nleast) cause system crashes.  While new versions of operating\nsystems and internet protocols help this situation, it is always\na concern when sending large and complex files over the Web. 13. Conclusion",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "13.1": {
                "text": "[13.1] As I noted at the outset, the availability of powerful\ncomputers linked on the Web offers many possibilities, but also\npitfalls.  The most basic opposition here is technique versus\ncontent.  It is easy (remarkably easy!)  to become absorbed in\nthe how rather than the why and what when working with computers.\nThis situation is the result of many factors.  First, although\nthe Web is meant to be platform independent, in reality, each of\nthe major systems, from Apple, Microsoft and the IBM clones, Sun,\nand SGI, has its own characteristic ways of interacting with\nthe Web.  Thus, authors must learn different programming\nlanguages and codes.  Currently, for instance, Microsoft has its\nown brand of HTML, different for its browser, called Internet\nExplorer, than that used on the browser, Netscape Navigator, so\nthat some web pages or features cannot be read by both programs.\nAlthough Director is useful since its Shockwave movies are\nplayable on MacIntosh or Windows machines, in the latter case,\nusers must have sound cards properly installed and overcome some\ndifficulties in the plug-and-play; features to hear musical\nfiles.  As well, servers are often Unix based machines.  In my\nown efforts, I discovered that, while upper case or lower case\nletters in file names and links are equivalent on the MacIntosh,\non the UNIX server a reference to a file with a different\nconfiguration of lower or upper case letters failed to find the\nfile, and I had to redo some links and code.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "13.2": {
                "text": "[13.2] Second, since in the marketing of computer programs,\nprices must go down with successive generations of more powerful\nsystems, companies dole out versions of software yearly that\nusers are required to purchase to keep up.  Although Director is\nuseful, for instance, the initial cost is high (around $800)\nuntil the educational versions come out, usually a year or two\nlater.  The educational version of Director 5, for around $75,\nwas available only a few months before Director 6.0 came out.\nAfter the initial outlay, while upgrades are not too expensive,\nthe price dissuades many authors.  In my case, I learned the\nShockwave version of Director 5.0 by cobbling together elements\nfrom books and the Web; in Director 6.0, these elements have been\nintegrated into the program—but with some elements now changed\nfrom the Afterburner; generation.  Such changes make working in\nmulti-media exasperating.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "13.3": {
                "text": "[13.3] Third, to create worthwhile educational content for the\nWeb, instructors have to re-imagine their course material, or\ninvent new courses, appropriate for the new medium.  Putting\nclass notes and schedules in electronic form is convenient, but\nhardly represents a new use for computers.  What is the criteria\nfor useful Web texts?  At Eastman, only a relatively small\nproportion of students have web access, so it is difficult to do\ntests with large groups.  I have just begun to use web pages in\nmy own teaching, but in the process of thinking about using the\nweb and computers, a few important questions have come to mind\nand, I believe, need to be considered by all web authors for\neducational materials: 1) Do the materials use the capabilities of the computer to\ncombine sound and image?  Image and text alone work quite well in\na book, and sound alone is easily available on CD systems.\nCombining images and text, with instant access to both, is a\nstrength of the computer, and should be the goal of instructional\nmaterials. 2) Are the learning materials goal-directed?  I’m not a big fan\nof pages full of multiple menu possibilities on successive pages\nor teaching materials organized like a game.  Part of teaching is\ninstructing students in a systematic and goal-oriented way, as\ntheir lack of experience with the material is the reason they’re\nin the class to begin with:  it is not appropriate to assume that\nthey will make the best decisions in the order of material.  Web\nmaterials should be efficiently and clearly presented, with the\nnext step indicated. 3) Do the assignments or tasks on the Web allow students to learn\nat their own pace?  This question requires a well-thought out\ninterface, with lots of looping connectors so that students can\ngo back over material and review/rediscover ideas and concepts as\nneeded.  This potential is also one of the great strengths of the\ncomputer. 4) Does the program or file point beyond itself, causing the\nstudent to make larger connections?  Self-contained drill type\nprograms might be of some use in a directed environment, but the\nideal materials should both present the immediate topic and point\n(with links) to topics of larger implication.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "13.4": {
                "text": "[13.4] To the problems of multi-media authoring noted\nabove—learning programming languages, Web pages, problems with\nmultiple platforms and generating sound—Director offers an\nall-in-one solution, and is worth consideration by all those\ninterested.  Although it has a few quirks, Director is relatively\neasy to learn and get fast results with scripts. (12) As for the\noften frustrating and time-consuming process of developing\ncontent for the Web, Director can help with the technique, but\nthe content—from imagination and an understanding of the\nmedium—is the result of hard work and time spent in the\nenvironment.  As operating systems and programs become ever more\nclosely tied to the Web, with teaching and learning in the\neducation business inevitably following, all of us will need to\nuse computers in the most efficient and effective ways possible.",
                "footnotes": [
                    "FN12"
                ],
                "citations": []
            }
        }
    ],
    "mto": true,
    "category": "articles",
    "source": "mto/raw/mto.97.3.5.headlam.html",
    "data": "mto/data/mto.97.3.5.headlam.json"
}