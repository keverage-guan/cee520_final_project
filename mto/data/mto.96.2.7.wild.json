{
    "title": "A Review of the Humdrum Toolkit: UNIX Tools for Musical Research, created by David Huron",
    "date": "1996/11/01",
    "volume": "2",
    "issue": "7",
    "authors": [
        "Wild, Jonathan"
    ],
    "abstract": "David Huron’s Humdrum Toolkit is a set of software tools created for computer-assisted musical research. This review describes and evaluates the Toolkit and the music representation schemes that support it.",
    "keywords": [
        "computer applications",
        "database",
        "software tools",
        "humdrum",
        "David Huron"
    ],
    "doi": "",
    "received": "",
    "pdf": "http://www.mtosmt.org/issues/mto.96.2.7/mto.96.2.7.wild.pdf",
    "author_info": [
        {
            "name": "Jonathan Wild",
            "university": "McGill University",
            "address": "Faculty of Music, Dept. of Theory, 555 Sherbrooke West, Montreal, Quebec, H3A 1A3",
            "email": "jon@music.mcgill.ca"
        }
    ],
    "citations": {},
    "footnotes": {
        "FN1": {
            "text": "1. Stephen Travis Pope (Editor), “Music Representation \nand \nScoring (parts 1 and 2),” Computer Music Journal , 17.3, 17.4 \n(1993).",
            "citations": []
        },
        "FN2": {
            "text": "2. Representation schemes include two leading asterisks \nin their \nname. Tandem interpretations, discussed below, include one \nleading asterisk. It is unfortunate but hopefully not too \nconfusing that asterisks are also used to draw attention to a \nword or phrase of ASCII text, in the manner of italics.",
            "citations": []
        },
        "FN3": {
            "text": "3. A scheme called **dynam appears in the \ndemonstration files \nthat come with the software.",
            "citations": []
        },
        "FN4": {
            "text": "4. Andreas Kornstaedt’s “SCORE-to-Humdrum: A \nGraphical Environment for Musicological Analysis,” Computing in Musicology , Vol. 10 (1996): 105–122\ndescribes a translator program from the widely used notation \nprogram SCORE to a Humdrum format. Should the translation \nprove reliable a large quantity of commercially published scores \nencoded in SCORE will theoretically become available for use \nwith Humdrum.",
            "citations": []
        },
        "FN5": {
            "text": "5. See below regarding a forthcoming Users’ Guide for \nnovice users.",
            "citations": []
        },
        "FN6": {
            "text": "6. I shall make the same disclaimer that David Huron \nmakes for \nhis own Humdrum demonstration problems: my intent is to \nillustrate the use of the Toolkit, not provide an air-tight \nsolution to the problem.",
            "citations": []
        },
        "FN7": {
            "text": "7. Sixteen chorales (among other scores) are included \nwith the \nHumdrum software. They should be concatenated into one file, \ncalled chorales, for this application.",
            "citations": []
        },
        "FN8": {
            "text": "8. deg’s default assumption is that the “raised” \nleading-tone in \nminor is the norm; the “natural” minor seventh is tagged as a \nchromatically altered note.",
            "citations": []
        },
        "FN9": {
            "text": "9. To illustrate, operating on this file: ears\nfingers\nfingers\nfingers\nnose\neyes\nfingers\neyes \nears \nfingers the command sort | uniq -c | sort would return the following: 1 nose\n2 ears\n2 eyes\n5 fingers 10. On my system, the above pipeline took less than 30 \nseconds \nto compute an answer for sixteen chorales; all of Bach’s 371 \nchorales would take a few minutes—still negligible compared to \nthe several days it would take to compile the same results by \nhand. 11. There are at present no Humdrum MIDI input and \noutput \nutilities for UNIX systems; the perform, record and encode \nfeatures are available only for DOS or OS/2 machines. 12. Kyle Dawkins has written an external player for \nHumdrum (and \nstandard MIDI files) that provides full graphical control of \nplayback features and a field for echoing comments embedded in \nthe file; as of now it runs under Windows95 only. Kyle welcomes \ninquiries about his player; he can be contacted at . 13. See below regarding a forthcoming comprehensive \nUsers’ Guide \nthat will remedy this lack of help. 14. Personal communication. 15. See the website at http://ccrma-www.stanford.edu/CCRMA/Courses/SummerWorkshops/96 16. Personal communication from David Huron. 17. Andreas Kornstaedt, “SCORE-to-Humdrum: A Graphical Environment for Musicological Analysis,” Computing in \nMusicology , Vol. 10 (1996): 105–122. 18. Personal communication. Stephen Travis Pope (Editor), “Music Representation \nand \nScoring (parts 1 and 2),” Computer Music Journal , 17.3, 17.4 \n(1993). Representation schemes include two leading asterisks \nin their \nname. Tandem interpretations, discussed below, include one \nleading asterisk. It is unfortunate but hopefully not too \nconfusing that asterisks are also used to draw attention to a \nword or phrase of ASCII text, in the manner of italics. A scheme called **dynam appears in the \ndemonstration files \nthat come with the software. Andreas Kornstaedt’s “SCORE-to-Humdrum: A \nGraphical Environment for Musicological Analysis,” Computing in Musicology , Vol. 10 (1996): 105–122\ndescribes a translator program from the widely used notation \nprogram SCORE to a Humdrum format. Should the translation \nprove reliable a large quantity of commercially published scores \nencoded in SCORE will theoretically become available for use \nwith Humdrum. See below regarding a forthcoming Users’ Guide for \nnovice users. I shall make the same disclaimer that David Huron \nmakes for \nhis own Humdrum demonstration problems: my intent is to \nillustrate the use of the Toolkit, not provide an air-tight \nsolution to the problem. Sixteen chorales (among other scores) are included \nwith the \nHumdrum software. They should be concatenated into one file, \ncalled chorales, for this application. deg’s default assumption is that the “raised” \nleading-tone in \nminor is the norm; the “natural” minor seventh is tagged as a \nchromatically altered note. To illustrate, operating on this file:\n\nears\nfingers\nfingers\nfingers\nnose\neyes\nfingers\neyes \nears \nfingers\n\nthe command sort | uniq -c | sort would return the following:\n\n1 nose\n2 ears\n2 eyes\n5 fingers On my system, the above pipeline took less than 30 \nseconds \nto compute an answer for sixteen chorales; all of Bach’s 371 \nchorales would take a few minutes—still negligible compared to \nthe several days it would take to compile the same results by \nhand. There are at present no Humdrum MIDI input and \noutput \nutilities for UNIX systems; the perform, record and encode \nfeatures are available only for DOS or OS/2 machines. Kyle Dawkins has written an external player for \nHumdrum (and \nstandard MIDI files) that provides full graphical control of \nplayback features and a field for echoing comments embedded in \nthe file; as of now it runs under Windows95 only. Kyle welcomes \ninquiries about his player; he can be contacted at \n. See below regarding a forthcoming comprehensive \nUsers’ Guide \nthat will remedy this lack of help. Personal communication. See the website at http://ccrma-www.stanford.edu/CCRMA/Courses/SummerWorkshops/96 Personal communication from David Huron. Andreas Kornstaedt, “SCORE-to-Humdrum: A Graphical Environment for Musicological Analysis,” Computing in \nMusicology , Vol. 10 (1996): 105–122. Personal communication. Return to beginning Copyright Statement Copyright © 1996 by the Society for Music Theory. All rights reserved. [1] Copyrights for individual items published in Music Theory Online ( MTO ) \nare held by their authors. Items appearing in MTO may be saved and stored in electronic or paper form, and may be shared among individuals for purposes of \nscholarly research or discussion, but may not be republished in any form, electronic or print, without prior, written permission from the author(s), and advance \nnotification of the editors of MTO. [2] Any redistributed form of items published in MTO must include the following information in a form appropriate to the medium in which the items are \nto appear: This item appeared in Music Theory Online in [VOLUME #, ISSUE #] on [DAY/MONTH/YEAR]. It was authored by [FULL NAME, EMAIL ADDRESS], with whose written \npermission it is reprinted here. [3] Libraries may archive issues of MTO in electronic or paper form for public access so long as each issue is stored in its entirety, and no access fee \nis charged. Exceptions to these requirements must be approved in writing by the editors of MTO, who will act in accordance with the decisions of the Society \nfor Music Theory. This document and all portions thereof are protected by U.S. and international copyright laws. Material contained herein may be copied and/or distributed for research \npurposes only. Return to beginning Prepared by Nicholas S. Blanchard and Tahirih Motazedian, Editorial Assistants",
            "citations": []
        }
    },
    "paragraphs": [
        {
            "0": {
                "text": "1. Introduction 2. Humdrum 3. Humdrum Representations 4. Humdrum Commands 5. Sample Problem 6. The Toolkit 7. Reference Manual 8. Humdrum Now and in the Future 9. Conclusion 1. Introduction",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "1.1": {
                "text": "[1.1] Music-theoretical endeavors vary greatly in their breadth. \nAt one end of the spectrum are accounts of a particular \ncomposer’s technique within a particular piece; at the other, \nattempts to answer the most general questions about how music \nworks. As an investigator’s aims tend toward the latter end of \nthe continuum, he or she must explore a larger and larger \nrepertoire. Compounded with the level of intimacy with musical \ndetails that a systematic inquiry can require, a large body of \nmusic can quickly exceed the capacity of one scholarly lifetime. \nAn indispensable step in pursuing this broader type of research \nis thus the accumulation and maintenance of a large, searchable \ncomputer database of music. Even the study of repertoires of \nmanageable size is more flexibly undertaken when digital \nrepresentation and automated manipulation of the music is \navailable.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "1.2": {
                "text": "[1.2] The Center for Computer Assisted Research in the Humanities \n(CCARH) at Stanford has an ongoing musical database project; \namong other items virtually all of J. S. Bach’s oeuvre has been \nelectronically encoded. Of vital importance to such a task’s \nusefulness is the format of musical representation within the \ndatabase. As the success of computer-assisted musicology \nbecomes more widely apparent, musical representation schemes are \nlikely to proliferate, jockeying for position until such time as \nsome sort of standard is agreed upon. The evaluation of \nrepresentation schemes has been a hot topic in the \nnot-so-distant past; (1) however, most \nof the schemes discussed \nwere designed to aid composers of computer music, whose \nrequirements do not necessarily intersect with those of \ninvestigative scholars. In CCARH’s database, several formats \nfor encoding music are employed concurrently, all subsets of \nCCARH’s master representation MuseData. The structure of the \ndatabase and the aims of the various schemes have been described \nelsewhere; most promising among the schemes is the Humdrum \nrepresentation, designed by David Huron. 2. Humdrum",
                "footnotes": [
                    "FN1"
                ],
                "citations": []
            }
        },
        {
            "2": {
                "text": "[2] Humdrum comprises two distinct aspects, corresponding to the \nrepresentation and manipulation of musical data. First, there \nis the syntax defined for representing discrete information as a \nseries of records in a computer file. Its definition allows for \nmany kinds of information to be encoded; the scheme used in the \nCCARH database for essential musical pitch and duration \ninformation is just one of an open-ended set—some other members \nof which I mention below—that may be augmented by user-defined \nschemes for specific research tasks. Second, there is the set \nof commands, the Humdrum Toolkit, devised to manipulate files \nthat conform to the Humdrum syntax in the name of machine-aided \nresearch in music. The emphasis here should be on “aided”: \nHumdrum possesses no higher-level analytical faculties per se. \nRather, its power derives from the flexibility of its kit of elemental \ncommands, which the user must learn to use in combination to exploit \nfully the system’s potential. 3. Humdrum Representations",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "3.1": {
                "text": "[3.1] Before discussing the ways in which the \nToolkit can be used \nit will be helpful to inspect the conventions of one particular \nHumdrum representation, by means of a musical fragment. Example 1 (below) contains the first two phrases of the Bach chorale “Nun \ndanket alle Gott” in Humdrum’s core pitch/duration representation \nscheme, **kern . (2) In this \nexample, the first three lines, each \ntagged by a triple exclamation mark, are reference records, each \nof whose meaning should be readily apparent. Humdrum specifies \nover 80 types of reference records for electronic scores, \nproviding for information as diverse as the catalogue number, \nname of the dedicatee, manuscript location or translated title \nin over forty languages. EXAMPLE 1\n\n!!!COM: Bach, Johann Sebastian\n!!!OTL: Nun danket alle Gott\n!!!ENC: Wild, Jon\n**kern **kern **kern **kern\n*A: *A: *A: *A:\n4AA 4c# 4a 4ee\n=1 =1 =1 =1\n8A 4c# 4a 4ee\n8B . . .\n8c# 4c# 4a 4ee\n8A . . .\n8D 4d 4a 4ff#\n8E . . .\n8F# 4d 4a 4ff#\n8D . . .",
                "footnotes": [
                    "FN2"
                ],
                "citations": []
            }
        },
        {
            "3.2": {
                "text": "[3.2] A Humdrum file is comprised of a series of records , each \ntaking up one line. The four columns that follow the reference \nrecords are termed spines ; they are separated by tab \ncharacters. Events in the same data record occur \nsimultaneously, while events in the same spine but in distinct \ndata records occur sequentially. The heading **kern , which is \nthe exclusive interpretation of each spine here, signifies \nthat the information within concerns pitch and duration. A file \nmay contain any number of spines with various exclusive \nrepresentations; in this example each spine represents one voice \nof a four-part chorale. The fifth data record of Example 1 \ncontains a tandem interpretation for each spine which denotes \nthe key of the excerpt; other tandem interpretations within **kern contain information about meter signature, tempo, \ninstrument etc.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "3.3": {
                "text": "[3.3] A **kern representation may be thought of as a rotation, \n90-clockwise, of the musical score. Thus the leftmost spine \ncorresponds to the lowest voice, and time runs down the page \ninstead of left to right. Additional spines, possibly running \nconcurrently with **kern , could contain either fairly \nstraightforward things, such as vocal text ( **text \nrepresentation ) or a Roman-numeral harmonic analysis ( **harm \nrepresentation ), or relatively abstruse information such as \ncochlear coordinates ( **cocho ), sensory dissonance \n( **diss ) or \nacoustic spectral data ( **spect ). Some of these other \nrepresentations can be generated as output by commands operating \non a **kern spine or set of spines. For example, the pcset \ncommand would automatically append to the chorale in example 1 a **pcset spine that labeled each simultaneity by its Fortean \nset-class name, prime-form or interval vector. The data for a **harm spine, on the other hand, must be entered manually (until \na dependable machine algorithm for harmonic analysis is \ndeveloped).",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "3.4": {
                "text": "[3.4] Each encoded note in example 1 has at least two parts, \ncorresponding respectively to the note’s duration and pitch: an \ninteger, and one or more upper- or lower-case letters. The \ninteger represents duration via the reciprocal of the \nNorth-American note-value; for example, a quarter-note by “4” \nand a sixteenth-note by “16.” A breve (length of two \nwhole-notes) takes the special value 0. Eighth-note triplets \nwould each be allotted the integer 12—since they each span a \nthird of a quarter-note, logically they are twelfth-notes. A \nnote participating in a septuplet in the time of a dotted \nquarter-note would receive the value 28 (one seventh of a \nquarter-note, or a 28th-note) augmented by a dot; a further \nsubdivision of this note into three parts would yield a dotted \n84th-note (!). This convention may at first appear opaque, but \nmanages succinctly and consistently to express almost all \ndurations. Exceptions that spring to mind include the \nadmittedly obscure odd subdivisions of a breve, such as \nwhole-note triplets (three to a breve), and such Ferneyhoughian \natrocities as “four in the time of three notes of a quintuplet,” \nwhich require the use of superfluous ties and/or dots.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "3.5": {
                "text": "[3.5] The lower- or upper-case letters denote the pitch-class and \noctave of a note; chromatic alterations are of course also \nprovided for, as are a large number of articulation markings \n(such as the tie in the alto part of Example 1, shown by the square \nbrackets), ornaments, editorialisms, and stem and beam \nindicators. It is important to note that each of the components \nof a note’s representation is optional: a file containing \ndurations only could be compiled were one’s object to \ninvestigate solely the rhythmic character of a set of melodies. \nRests are indicated by combining a reciprocal duration with the \nletter “r”; the frequent period characters are merely place \nmarkers, “null tokens” in a data record with activity in another \nspine. Barlines appear as records with a leading \nequals sign; \nan elaborate system of visual correspondences distinguishes \nbetween various forms of double barlines and/or repeat signs. \nDynamics are conspicuously absent in **kern , and indeed do not \nappear in any of the pre-defined representation schemes \ndocumented in the manual (3) —should \nthey be required for a \nspecific task the researcher may invent his or her own scheme. \nGuidelines for this are given in a chapter of the reference \nmanual.",
                "footnotes": [
                    "FN3"
                ],
                "citations": []
            }
        },
        {
            "3.6": {
                "text": "[3.6] As may be surmised, thoroughly encoding a piece of music can \nbe a fairly laborious process. Unless electronic editions of \nthe works under investigation happen to be available, either \ncommercially or in the public domain, this is likely to be the \nbiggest impediment to a researcher’s making use of Humdrum. \nWhile there are functions designed for capturing data from a \nMIDI controller (encode and record), it may often be simpler to \nenter **kern data manually once one is familiar with the \nencoding format—especially when reduced information suffices \nfor the task at hand. With the advent of a reliable Optical \nMusic Recognition system, under development at McGill University \nand elsewhere, a program could certainly be written to scan a \nmonophonic score directly into a Humdrum file. But with more \ncomplex input such as found in, say, a late Romantic piano work, \nit will be some time before a computer can correctly parse the \nmusic into meaningful strands suitable for Humdrum spines—an \ninner part crossing between staves is apt to cause confusion \neven in music students, let alone in a segmentation program. \nAutomated translation of a standard MIDI file into a Humdrum \nformat offers the same problems (although the opposite \nconversion, from any one of several Humdrum formats to a \nstandard MIDI file, is possible and indeed implemented in the \ntool kit). (4)",
                "footnotes": [
                    "FN4"
                ],
                "citations": []
            }
        },
        {
            "3.7": {
                "text": "[3.7] While here is not the place for a detailed examination of \nall the various pre-defined Humdrum formats, a couple more will \nserve as additional examples to **kern . The tablature \nrepresentation for fretted instruments, **fret , is particularly \nwell developed, and can accommodate non-standard and non-Western \ninstruments. The tuning of each string and the exact position \nof each fret are specified in tandem interpretations, and \ndetailed information is encoded in each data record about which \nstrings are plucked, how they are plucked, and at which fret. \nThe **IPA scheme phonetically represents vocal texts via an \nASCII alphabet, and includes stress and intonation information. \nThe “formant” command can be used to generate a spine with the two \nstrongest formant frequencies of each vowel encoded in the **IPA representation. 4. Humdrum Commands",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "4.1": {
                "text": "[4.1] The “active” component of Humdrum, as compared to the \n“passive” syntax and representation schemes, is the kit of tools \nfor manipulating data files that conform to the Humdrum syntax. \nOnce the Toolkit is installed, commands are invoked via a \nstandard UNIX terminal, and the bulk of a researcher’s work will \nprobably rely on ordinary UNIX commands such as “grep” or “sort.” \nA modicum of familiarity with this operating system is required \nfor the aspiring Humdrummer to embark on a research project, and \nthe more at ease he or she is in a UNIX environment the sooner \nHumdrum will be mastered. There are roughly a \ndozen basic UNIX \ncommands that a user should be able to negotiate, but no \nintroduction to this basic knowledge within the current Humdrum \ndocumentation. (5)",
                "footnotes": [
                    "FN5"
                ],
                "citations": []
            }
        },
        {
            "4.2": {
                "text": "[4.2] A glance at the names of most Humdrum commands reveals very \nlittle about their purpose: only a small minority of them, such \nas “tran” (transpose), “reihe” (give variant row form), “iv” \n(determine interval vectors) and “freq” (return frequency in Hz), \nhave any obvious musical significance. And, as noted in the \nreference manual, these tend to be the least useful commands, \nsince they are so specialized. The nature of many \nof the basic \ncommands taken individually is quite abstract. To give an idea \nof their scope in combination, as well as of the working \nenvironment of Humdrum, here follows a modest sample problem we \nmight wish to answer. (6) 5. Sample Problem",
                "footnotes": [
                    "FN6"
                ],
                "citations": []
            }
        },
        {
            "5.1": {
                "text": "[5.1] In what proportion are leading-tones in Bach chorale \nmelodies approached from beneath, and in what proportion from \nabove? If we are unaided by a computer, the question will pose no \nspecial problem as long as we restrict the number of chorales we \nwish to consider: for some purposes a few will suffice and the \nappropriate notes can easily be counted by hand. But should we \nwish to consider a large number of chorales, our task will be \nconsiderably easier—and will provide more reliable answers—if \nwe let the computer do the counting.  Let us work \nthrough the \nsteps involved, assuming the existence of a file containing \nencoded versions of several Bach chorales. (7) First, we are \ninterested only in the melody, which is in the soprano part, or \nthe fourth spine of the file. For this we may use the Humdrum \ncommand “extract,” which selects certain data from a file. The \nfull command would be extract -p 4 chorales > temp1 where the “-p 4” indicates the fourth spine, and “temp1” is the \nname of the temporary file we are creating for the extracted \nspine.",
                "footnotes": [
                    "FN7"
                ],
                "citations": []
            }
        },
        {
            "5.2": {
                "text": "[5.2] The original file represents notes by their pitch. We need \nscale-degree information instead, in order to locate \nleading-tones. The command “deg” will convert a file of **kern data records into a file of **deg records, where each note \nappears as a number from 1 to 7, representing its scale degree. \nThe calculation is relative to the current key, as specified in key tandem interpretation records in the file. We also require \ncontour information; happily the **deg representation includes a \ndirection indicator: the lower-case letter v signifies “lower \nthan previous note” and the caret ^ signifies “higher than \nprevious note.” The next step in our sample problem is thus: deg -x temp1 > temp2 where the “-x” removes certain extraneous data. The new file, \ntemp2, will begin something like this: !!!COM: Bach, Johann Sebastian\n!!!XEN: J. S. Bach Chorale Harmonizations\n!!!OTL: Ermuntre dich, mein schwacher Geist\n!!!ONM: No. 9\n!!!SCT: BWV 454\n**deg\n! soprano\n*M4/4\n*G:\n1\n. \n\n=1\n1\n. \n\n^2\n\n..[etc.]",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "5.3": {
                "text": "[5.3] This is quite a messy file, for it includes comments \n(records with leading exclamation marks), null tokens (records \ncontaining only the period punctuation sign) and bar-lines \n(records with leading equals signs). We could invoke the \nHumdrum “rid” command to get “rid” of the items superfluous to our \ninquiry, but it is not strictly necessary. For our purposes the \nonly records that matter are those which contain the digit 7, \nfor the leading-tone, and start with an up or down sign (^ or \nv). We can use the UNIX command “grep” (Get Regular ExPression) \nto comb the file under scrutiny for a target string, and output \nonly those lines containing at least one occurrence of the \nstring. The target-string syntax will no doubt be obscure to \nthose unfamiliar with UNIX regular expressions; leaving that \naside for now, the following command (working on the file \npreviously generated): grep ^[v^]7 temp2 > temp3\n\n\nwill yield the following file, called temp3: \n\n^7\nv7\nv7\n^7\nv7-\n\n..[etc.]",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "5.4": {
                "text": "[5.4] Notice that a few records with a minus sign \nappear in this \nfile. These represent lowered seventh scale-degrees such as may \noccur in a tonicization of IV, or in the mediant area of a \nminor-key chorale. (8) To ignore these \nrecords we can make use \nof grep’s -v option, which removes any lines containing the \ntarget string and returns only those lines without it: grep -v [-] temp3 > temp4",
                "footnotes": [
                    "FN8"
                ],
                "citations": []
            }
        },
        {
            "5.5": {
                "text": "[5.5] The original file has been whittled down to \na series of \nrecords that contain exclusively unlowered leading-tones along \nwith directional information. The final step will be to compare \nthe frequency of occurrence of ^7 to that of v7. This requires \nthe standard UNIX compound command sort | uniq -c | sort, which \nremoves all duplicate lines from a file, recording the number of \noccurrences of each, and returns the contents in increasing \norder of frequency. (9) The last step \nin our problem, then, is: sort temp4 | uniq -c | sort",
                "footnotes": [
                    "FN9"
                ],
                "citations": []
            }
        },
        {
            "5.6": {
                "text": "[5.6] The sequence of commands given above generated a chain of \nintermediate, “junk” files—Humdrum and UNIX commands generally \ncreate new files, leaving those they worked on intact. Instead \nthe whole process, once designed and tested on a shorter file, \ncould be amalgamated in a “pipeline” of commands, each passing \nits result to the next through the UNIX “pipe” (typed as |): extract -p 4 chorales | deg -x | grep ^[v^]7 | grep -v [-] | \nsort | uniq -c | sort The final output will look something like this: 15 ^7\n22 v7 indicating that, within the sample of sixteen chorales, Bach \napproached the leading tone from above roughly 50% \nmore often than from below.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "5.7": {
                "text": "[5.7] As we can gather from the above, the \ndifficulty in \nimplementing the machine-aided solution does not lie in \nunderstanding the functioning of the individual commands, but in \ndevising an appropriate way to combine them. The advantages of \na machine-aided solution to this problem are threefold. First, \nextremely large amounts of music could be processed with no \nextra work on the part of the researcher, and the task would \nremain tractable within a reasonable length of time. (10) Secondly, we obtain a concrete and objective result, \nreproducible by other workers with access to the same data. And \nthirdly, if we decide afterwards that we wish to vary the \nquestion by, say, discounting leading tones approached by leap \ninstead of step, we would not have to return to the scores from \nscratch, but simply add a couple of steps to our pipeline of \ncommands. 6. The Toolkit",
                "footnotes": [
                    "FN10"
                ],
                "citations": []
            }
        },
        {
            "6.1": {
                "text": "[6.1] The manual divides the Toolkit into the categories of \nspecialized and basic tools. Specialized tools work only on a \nparticular subset of exclusive representations. Two that crop \nup frequently in standard analytical applications derive \nharmonic and melodic intervals from **kern -type spines; these \nare respectively invoked by “hint” and “mint.” Alternative \nrepresentations of pitch are generated from a **kern spine by \nthe commands “cents” (distance in hundredths of a semitone from a \nreference point), “freq” (frequency in Hz), “semits” (semitones away \nfrom a reference point), and several others, which could all be \nuseful depending on the nature of one’s research. (I personally \ncan’t imagine an application for the **solfg representation, \nwhich encodes pitch as French solfege syllables, but should \nanyone dream one up Humdrum is prepared.) There are several \nadvanced commands that calculate numerical results from spines \nalready present, such as “spect,” which assembles sonorities’ \nspectral content for acoustical tasks, “synco,” which gives a \nmeasure of metric syncopation for each note, and “diss,” which \nimplements the Kameoka/Kuriyagawa measure of dissonance. The \nalgorithms that perform the calculations are well documented, \nwhere applicable.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "6.2": {
                "text": "[6.2] The “perform” command plays back the \ncontents of a Humdrum \nMIDI file, converted from a **kern file by the midi command (and \nfurther convertible to a standard MIDI file by the smf command, \nfor exporting to a sequencer or other external application \nprogram). (11) Play-back is via an \nexternal MIDI synthesizer and \ncontrol card (not included!), and allows the user to \nproof-listen interactively, changing the tempo, repeating \nsections and skipping forwards or backwards to the desired bar \nnumber. An extremely promising feature from a pedagogical point \nof view is that “perform” relays comments encoded alongside the \nmusic onto the screen. Thus the encoding of a sonata could \ninclude labels for the various formal sections or particular \nharmonic devices, which would appear on the screen at the \nappropriate moment during playback. Another application would \nbe to use the “pattern” command to locate tone rows in a \ntwelve-tone piece and tag them with a comment, letting “perform” \nskip straight to each occurrence of the row and provide \non-screen commentary about the row-form. (12)",
                "footnotes": [
                    "FN11",
                    "FN12"
                ],
                "citations": []
            }
        },
        {
            "6.3": {
                "text": "[6.3] Basic tools, contrary to specialized tools, do their work \non any representation scheme. Many of them combine or \ndissociate spines, files or parts of files as intermediate steps \nin a problem’s solution; these include “assemble,” “extract,” \n“rend,” “yank,” and “cleave” (this last command is used in the \nolder sense, of “join”, as in “a man shall cleave unto his wife,” \nrather than its opposite, as in “rock of ages, cleft for me”). \nThere are also several tools useful for statistical and \ninformation-theoretical measures; these include “correl,” which \nprovides a coefficient of correlation between the numeric data \nin two spines, “simil,” which measures the similarity between two \nspines based on typographical “edit distance,” “infot,” which \ndescribes the flow of information, and “scramble” which randomizes \ndata records for control purposes.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "6.4": {
                "text": "[6.4] Two very powerful basic tools deserve special mention: “patt” \nand “pattern,” which differ only slightly in their functioning. \nEach allows the user to define a pattern in a template that \nshould match one or a sequence of data records in the file, not \nnecessarily contiguous. Humdrum will proceed exhaustively to \nlocate patterns in the encoded selection that match the \ntemplate. Patterns can be horizontal (simultaneous), vertical \n(sequential within one spine), or even diagonal (useful for \nidentifying Klangfarbenmelodie or other “threaded” patterns), \nand can be defined as explicitly or as “fuzzily” as is needed. \nThe researcher can use other representations than **kern in \nconjunction with these tools—for example to discover idiomatic \nfingering patterns from a **fret representation, or particular \nharmonic progressions from a **harm representation. There is a \nconsiderable art involved in correctly defining the target \ntemplate; readers familiar with UNIX regular expression syntax, \ncrucial here in the creation of a template, will appreciate the \nniceties involved in fine-tuning an expression that is to be \nsought. The manual justly includes an tutorial in \nregular-expression syntax, and is at its best in this \nexceedingly clear section dealing with what in other hands could \neasily have appeared especially cryptic. Humdrum also provides \nfor interactive checking of a regular expression against a \nuser-definable test file, via the command “regexp.”",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "6.5": {
                "text": "[6.5] The demonstration program bundled with the Toolkit solves \nten problems on screen, explaining each step as it is \nimplemented. To work through the problems myself I found I had \nto refer to the shell scripts containing the commands that \nactually perform the manipulations, rather than the onscreen \nversions, which are somewhat simplified. Half of the sample \nproblems incorporate audio illustrations; they include locating \nall occurrences of “B-A-C-H” in a Brandenburg Concerto and a \ncomparison of syncopation in George Gershwin and Stephen Foster. \nThe reference manual gives several other examples of questions \nthat Humdrum could be used to answer; they include: Are \ncrescendos in Wagner more strongly associated with rising pitch \nthan is the case with other composers? In Bartok, are \ndissonances more common in strong metric positions than in weak \nmetric positions? In Urdu folk songs, how common is the \nso-called “melodic arch”—where phrases tend to ascend and then \ndescend in pitch? While the demonstration \nsoftware provides \nsome help in appreciating how problems can be solved using \nconnected Humdrum tools, and while annotated solutions to sample \nproblems do not belong, strictly speaking, in a reference work, \nnovice users may feel they need more hints than they can glean \nfrom individual command specifications as to how these questions \nmight be answered. (13)",
                "footnotes": [
                    "FN13"
                ],
                "citations": []
            }
        },
        {
            "6.6": {
                "text": "[6.6] The Toolkit and representation schemes are not intended to \nmeet the requirements of a researcher’s every contingency, nor \ncould they be. Creating “home-made” task-specific \nrepresentations is a simple job, given some discussion in the \nmanual. The creation of new commands, on the other hand, is \nlikely to remain the domain of those already familiar with a \nprogramming language. A skeleton program to aid in software \ndevelopment is provided, written in the AWK programming language \nand incorporating several useful functions. 7. Reference Manual",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "7": {
                "text": "[7] Humdrum’s compendious reference manual is a model of \nclarity, completeness and logical design, running to 550 pages \nincluding a substantial index of some 2700 terms. The “General \nIntroduction” is especially well written, and admirable in its \nlevel-headed and patient presentation of the elements of \nHumdrum—having tried myself I realize how difficult it is to \nexplain clearly what Humdrum actually is and does. Each command \nand representation scheme is fully documented, in a consistent \nstyle that tends to err on the side of redundancy rather than \nattempt to be overly concise. Whereas typos and omissions tend \nto creep in quite easily in reference works, here there are very \nfew. The number of theoretically possible fingerings for a \npiano work is given as ten times the number of key presses \ninvolved, instead of the number of key presses raised to the \ntenth power (page 514); two typographical strings with no symbols \nin common are said to exhibit minimum edit-distance, instead of \nmaximum edit-distance (page 420); several commands (specc, spect, \nformant and diss) are mentioned in passing but not given proper \ndocumentation (though the representations they produce are); it \nis suggested that a dominant seventh chord on the supertonic \ndegree be labelled V7/ii (page 86); and the two accounts of the \nsignifier for doubly-lowered notes in the **deg representation \nare inconsistent (pages 59, 264). 8. Humdrum Now and in the Future",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "8.1": {
                "text": "[8.1] The Toolkit can currently be downloaded from the server at \nthe University of Waterloo. The FTP site is , and Humdrum resides in the directory \ncalled /uw-data. Although the software is free, users must \nlicense their copy after ten days by sending their vital \nstatistics to David Huron at Waterloo; this information is used \nto demonstrate to granting agencies that the software is being \nused. It runs in UNIX, DOS, Windows95 or OS/2 environments, but \nthe last three require the presence of some UNIX utilities—the \nAWK language and a shell command interpreter—before Humdrum can \nbe installed. On UNIX machines the perform, encode and record \nfunctions are not implemented as of yet, and several other \ncommands must be compiled locally before they can run—I had \ndifficulty getting the simil command to compile, and eventually \ngave up. All instructions are given very clearly in the \nInstallation Guide, which is included with the software in \nPostScript format, as is the Reference Manual. A very clear FAQ \n(Frequently Asked Questions) file is included with the release, \ntoo; Huron recommends that potential users read this document \ncarefully before deciding to download the Toolkit. It can be \nviewed on a World Wide Web site at: http://www.lib.virginia.edu/dmmc/Music/Humdrum",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "8.2": {
                "text": "[8.2] Scores that accompany the current release of Humdrum \ninclude a selection of sixteen Bach chorales, in both **kern and **harm representations; all 48 fugues from the Well-Tempered \nClavier; vocal melodies from Schubert Lieder and a collection of \nScottish and English folk tunes. A **kern thematic database of \nsome ten thousand well-known classical themes (melody only) is \nexpected to be accessible via the World Wide Web early in the \nnew year, and is being considered for release as part of the \nHumdrum Toolkit in the near future. Such thematic catalogues \nexist in books already, but the flexibility of searching that \nHumdrum offers far surpasses that possible in the printed \nmedium. For instance, one could very quickly find all tunes in \nthe database whose first four notes have increasing durations; \nor whose range is exactly a minor sixth; or which are in Eb \nminor and triple metre. This could be very useful in a music \nlibrary, among other contexts. A user might wish to find the \nsource of a tune that started with, say, three notes descending \nstepwise, followed by upwards motion for one note then downwards \nnotion for one note, the last of these five notes being longer \nthan the others. Once the appropriate search string was \ndefined, Humdrum could find any matches, and, if there are more \nthan one, provide a MIDI performance of each of the candidates. \nOr rather than define the target string explicitly, the user \ncould play his or her best approximation to the tune on a MIDI \ncontroller; Humdrum would find the closest matches in the \ndatabase and give the numerical measure of correlation to what \nwas played for each match.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "8.3": {
                "text": "[8.3] Huron is nearing completion of a Users’ \nGuide to Humdrum \nthat “takes novice users by the hand, and teaches both Humdrum \nand the pertinent Unix utilities.” (14) Many sample problems \nwill be given annotated solutions, filling a gap in Humdrum \ndocumentation as it currently stands. To master \nthe system will \nstill require hard work, but the frustration of learning to \nnavigate the unfamiliar environment of UNIX will hopefully be \nlessened. An alternative way of learning Humdrum is through a \nseminar: Professor Huron taught a two-week summer course on the \nuse of the Toolkit at Stanford this year, (15) and at McGill the \nprevious summer.",
                "footnotes": [
                    "FN14",
                    "FN15"
                ],
                "citations": []
            }
        },
        {
            "8.4": {
                "text": "[8.4] All this proselytizing may still fail to \nconvince, given \nthe reluctance and inertia many of us are likely to experience \nwhen faced with as new and as vast a resource as Humdrum. So, \nsoftware developers have turned their attention to Humdrum-based \ngraphic user interfaces, which may well prove more appetizing to \nthose who feel claustrophobic when restricted to a bare UNIX \nshell. Two third-party graphic interfaces to \nHumdrum have been \ndeveloped, in Ireland and in Germany. (16) At the time of writing \nI have been unable to inspect them, though Andreas Kornstaedt’s \nis apparently described in a recent publication. (17) Also in \nthe works is a third-party translator from Humdrum to a \nnotation-based program, so that Humdrum files can be viewed as \nscores or printed in traditional notation.",
                "footnotes": [
                    "FN16",
                    "FN17"
                ],
                "citations": []
            }
        },
        {
            "8.5": {
                "text": "[8.5] Humdrum provides concrete answers to well-posed questions. \nSurprising or counterintuitive answers could be genuine, or they \ncould be the result of a malformed question or incorrect \nimplementation of Humdrum commands. It thus becomes important, \nwhen using machine-aided methods to prove or disprove a \nhypothesis, to document one’s methods. Full documentation of \nHumdrum processes could quickly become distracting, tedious, or \nunfeasible in a printed article where the ends, and not the \nmeans, constitute the main point. It would however be a simple \nmatter to place the relevant Humdrum scripts and encoded scores \non an internet site, referenced by the article, and available to \ninterested parties for retrieval. 9. Conclusions",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "9.1": {
                "text": "[9.1] Appreciation of the full potential of Humdrum is definitely \na hands-on experience. In the words of David Huron, from the \nreference manual: [a]ny set of tools requires the development of a concomitant \nexpertise, and the Humdrum Toolkit is no exception. It is my \nhope that the investment of time required to learn how to use \nHumdrum will be more than offset by the subsequent scholarly \ngains. Huron has certainly proved the last portion of \nthis excerpt \nthrough his own research, much of which has relied on Humdrum. \nHis work in music perception accounts for the inclusion in the \nToolkit of some specialized tools relevant to that area—in fact \nHumdrum users have so far tended to work in music perception or \nethnomusicology, while theorists and historical musicologists \nhave been slow to recognize the system’s potential. Huron \noffers the following sampling of projects he is aware of that \nrelied on Humdrum: (18) a study of \ncanonic compositional rules by \nZarlino, a study of Korean court music, a study of text/melody \nrelationships in Gregorian chant, a study of idiomaticism in \ntrumpet works, testing of Narmour’s model of melodic structure, \na study of musical texture, of Haydn string quartets, of \nphrasing and dynamics in piano works, and in perceptual \nexperiments, etc.",
                "footnotes": [
                    "FN18"
                ],
                "citations": []
            }
        },
        {
            "9.2": {
                "text": "[9.2] Humdrum or other systems like it offer the wherewithal for \na brand new paradigm for music research. The tedium of \ncollating hard evidence for one’s theories can be greatly \nalleviated by automation, and the more music examined the \ngreater the rigor of proof for one’s hypotheses. However the \nunfortunate possibility is that many of today’s musicologists \nand theorists who could benefit from a little machine-aided \ninsight are likely to be put off by Humdrum’s completely \ntext-based interface. Although in the final analysis UNIX-style \ncommands are surely more flexible and efficient than a \n“user-friendly,” graphic interface, they can appear daunting to \nnon-programmers, many of whom stand to be deterred from making \nuse of an otherwise valuable tool. Whether or not music \ntheorists will choose to augment their invaluable musical \nintuition with equally invaluable empirically verified results, \nbased on maximum amounts of relevant data, will be a most \nimportant factor in the evolution of our discipline.",
                "footnotes": [],
                "citations": []
            }
        }
    ],
    "mto": true,
    "category": "reviews",
    "source": "mto/raw/mto.96.2.7.wild.html",
    "data": "mto/data/mto.96.2.7.wild.json"
}