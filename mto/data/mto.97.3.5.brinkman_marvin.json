{
    "title": "Using the Tools to Teach the Tools: Teaching Multimedia Programming\nin Music Curricula",
    "date": "1997/09/01",
    "volume": "3",
    "issue": "5",
    "authors": [
        "Brinkman, Alexander R.",
        "Marvin, Elizabeth W."
    ],
    "abstract": "The Eastman School of Music is engaged in a school-wide initiative to broaden the scope of traditional music education, and to build new audiences for art music in future generations. As part of this endeavor, students in a new technology course are learning to experience and teach music in a new way through the power of multimedia computing. Students learn to create interactive multimedia applications on Macintosh computers that combine color graphics, scanned images, video, sound files, MIDI synthesizer, music notation, and tracks from commercial compact discs into a teaching environment for their own students. This essay describes the syllabus, teaching methods, and materials used in the course, and demonstrates sample student projects.",
    "keywords": [
        "multimedia",
        "HyperCard",
        "CAI",
        "cognition",
        "pedagogy"
    ],
    "doi": "",
    "received": "",
    "pdf": "http://www.mtosmt.org/issues/mto.97.3.5/mto.97.3.5.brinkman_marvin.pdf",
    "author_info": [
        {
            "name": "Alexander R. Brinkman",
            "university": "Eastman School of Music",
            "address": "26 Gibbs Street, Rochester, NY 14604",
            "email": "aleck@theory.esm.rochester.edu"
        },
        {
            "name": "Elizabeth W. Marvin",
            "university": "Eastman School of Music",
            "address": "26 Gibbs Street, Rochester, NY 14604",
            "email": "betsy@theory.esm.rochester.edu"
        }
    ],
    "citations": {
        "beekman_1996": "Beekman, George. 1996. HyperCard 2.3 in a Hurry: The Fast Track to Multimedia . Belmont: Wadsworth Publishing Co.",
        "brinkman_and_marvin_1996": "Brinkman, Alexander R. and Elizabeth W. Marvin. 1996. “CD-ROMs, HyperCard, and the Theory Curriculum: A Retrospective Review.” Journal of Music Theory Pedagogy 10 (in press).",
        "butler_1992": "Butler, David. 1992. The Musician’s Guide to Perception and Cognition . NY: Schirmer Books.",
        "cozby_1993": "Cozby, Paul C. 1993. Methods in Behavioral Research , 5th ed. Mountain View, CA: Mayfield Publishing Co.",
        "desberg_1994": "Desberg, Peter. 1994. Hyper InterActive CAI: Using HyperCard to Develop Computer-Assisted Instruction . Boston: Allyn and Bacon.",
        "goodman_1993": "Goodman, Danny. 1993. The Complete HyperCard 2.2 Handbook , 4th ed. New York: Random House Electronic Publishing.",
        "ray_and_ravissa_1998": "Ray, William J., and Richard Ravissa. 1998. Methods toward a Science of Behavior and Experience , 3rd ed. Belmont: Wadsworth Publishing Co.",
        "schachter_1983": "Schachter, Carl. 1983. “Motive and Text in Four Schubert Songs,” in Aspects of Schenkerian Theory , edited by David Beach. New Haven and London: Yale University Press, 61–76.",
        "winkler_et_al_1994": "Winkler, Dan, Scot Kamins, and Jeanne Devoto. 1994. HyperTalk 2.2: The Book , 2nd ed. NY: Random House Electronic Publishing."
    },
    "footnotes": {},
    "paragraphs": [
        {
            "0": {
                "text": "A Note About the Figures [HyperCard was not designed for presentation on the Web, although facilities\nfor doing this easily are promised in the next major release. While there\nare programs that convert HyperCard stacks for web use, many of the stacks\nshown here utilize commercial or custom-made CDs and external commands for\nthe Macintosh, making them impractical for web presentation without a great\ndeal of rewriting. We have compromised by showing individual cards as GIF\nimages and portions of programs as QuickTime movies. This does not allow\nuser interaction, but does demonstrate the programs. The GIF images were\ncreated from screen shots made via a keyboard shortcut on the Macintosh.\nThese were then cropped and converted with GIFConverter 2.3.7. QuickTime\nmovies were made using CameraMan 3.0 (Motion Works), which records movies\ndirectly from the computer screen. CameraMan does not record the cursor\non PowerMacs, so wherever possible, we modified buttons and fields so that\nthey would be highlighted when the user clicks on them with the mouse. Many\nof our stacks use a large-screen format which does not fit well into web\nbrowsers. Movies of these were reduced to half size resulting in some loss\nof definition, especially in text. Where higher definition was necessary,\nwe recorded partial windows, so the whole card does not show. We used SoundEdit\n16, version 2 to reduce all sound tracks to 22.05 kHz, 8 bit, mono to keep\nsize to a minimum. Figures are shown in separate windows, which should be\nclosed after viewing each figure. We have provided a button, implemented\nin JavaScript, at the bottom of each figure for this purpose, or you may\nuse the normal close box or pull-down menu, depending on which browser you\nare using. In the text-only version, figures that are text based are shown in full\nthrough linked pages. When GIF images or QuickTime movies are involved,\nwe list the figure name below the paragraph in which it is mentioned and\ngive the name of the file (in case the reader is able to download and view\nthem). Where necessary, a short description of the picture or movie is included.\nA prose description of multimedia is a poor substitute for the real thing;\nPLEASE read this article online with a full graphic browser if at all possible.] CONTENTS 1. Introduction 2. Using the Tools to Teach the Tools 3. Software Review--an Online Journal 4. Getting Started 5. Teaching HyperTalk Programming 6. Using External Commands 7. Implementing Music-Cognition Experiments 8. Student Projects 9. Future Directions 1. INTRODUCTION ( TOC )",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "1.1": {
                "text": "[1.1] In 1994 the authors were asked to design a new course in Multimedia\nProgramming to be offered by the Theory Department at the Eastman School\nof Music. The course was to have two primary objectives—to acquaint students\nwith techniques for using multimedia computing in instructional settings,\nand to develop techniques to be used in music-cognitive research. The course,\nentitled “Computing for Pedagogical and Cognitive Research Applications”\nwas offered for the first time in the spring of 1995, and is now offered\neach spring semester. We chose HyperCard as a programming environment because\nthe course was initially offered with minimal financial and technical support.\nAlthough Macromedia Director was already becoming popular, it was expensive\nand academic discounts were not available at the time. At about $85 per\ncopy, HyperCard could be put on each of the four computers we had available\nfor the course, and students could purchase it for use at home, thus extending\nour minimal resources.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "1.2": {
                "text": "[1.2] The course, which is required for our MA Theory Pedagogy degree\nand recommended for the Pedagogy and Cognition track in our Ph.D. program,\nis available as an elective in other tracks in our Ph.D. program. It can\nfulfill one theory requirement for graduate students in other degree programs\nand can be taken for credit by upper-level undergraduate students with permission\nof the instructors.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "1.3": {
                "text": "[1.3] This course complements several other courses offered at Eastman\nthat involve computers. The Theory Department also offers Brinkman’s two-semester\nprogramming course (Computer Applications in Music), and independent study\ncourses for students who want to do more in-depth work. Dave Headlam’s courses\nin acoustics, research methods, and web page design all have an important\ncomputer component. The Composition Department offers several courses in\ncomputer music synthesis, including an undergraduate introduction, and a\ntwo-semester sequence for graduate students. The Music Education Department\noffers their students training in use of synthesizers and MIDI, and Jazz\nand Contemporary Media offers courses in film scoring, recording techniques,\nand studio production techniques. As part of the Eastman Initiatives program,\nmany courses will be expanded to include a technology component. For example,\nin the Theory Department we are moving toward putting many course materials\non the web, and we are planning a technology component in our undergraduate\ncore curriculum that will include the mandatory use of music notation software,\nMIDI, CD-ROM browsing, and web usage.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "1.4": {
                "text": "[1.4] When we began the course, we did not have access to a well- equipped\ncomputer lab. Sibley Music Library provided a room for teaching, and we\nwere able to borrow an overhead projector with a display device. The school\nprovided the teaching station, a Power Macintosh 6100 with MIDI keyboard\nand interface, three computers for student use, and a limited budget for\npurchasing software. We were fortunate that Sibley Library already had a\ngood selection of CD-ROM media applications, and was extremely helpful in\npurchasing additional applications for their collection that would also\nserve as good teaching examples. The library also made available space for\nthe student computers in their listening room for viewing applications and\npreparing homework assignments. Figure 1 . Course Syllabus (click to enlarge and see the rest) [1.5] During the one-semester course, students\nreview commercial software packages (both CD-ROMs and CAI packages for ear\ntraining and theory instruction), design and run a music-cognitive experiment\nthat is completely implemented in HyperCard, and create an individual final\nproject in HyperCard. Final projects vary from music theory tutorials, to\near training drill-and- practice, to repertoire-based CD “companions.”\nStudents are also required to complete smaller assignments to acquire HyperCard\nauthoring and scripting skills. The syllabus for the course for the Spring\n1997 semester is shown in Figure 1 .",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "1.6": {
                "text": "[1.6] We have used several different texts in teaching the course in\naddition to the manuals that come with HyperCard. We have found Beekman, HyperCard 2.3 in a Hurry ( 1996 ) to be a terrific way to get students started\nin multimedia quickly. The first year we had students buy Desberg, HyperInterActive\nCAI ( 1994 ), which comes with a large set of example stacks. Although Desberg’s \ntreatment of educational philosophy and design were very helpful, the stacks\ncontain many errors and we often ended up using them as counter-examples\nof good design. After the first year we put a copy of this text on reserve\nin the library but did not have the students purchase it. Danny Goodman’s The Complete HyperCard 2.2 Handbook ( 1993 ) is the primary scripting source.\nHis practice of asking the reader to test commands interactively in HyperCard’s\n“message box” is an excellent pedagogical methodology, and his\napproach to presenting HyperCard and HyperTalk is accessible and thorough.\nFinally, HyperTalk 2.2, The Book , by Winkler, et. al. ( 1994 ) contains a\nwealth of excellent examples illustrating HyperTalk programming techniques,\nand was invaluable as a reference for the instructors. Students’ references\nfor the cognition portion of the course include David Butler, The Musician’s\nGuide to Perception and Cognition ( 1992 ), Ray and Ravizza, Methods Toward\na Science of Behavior and Experience ( 1998 ) and Cozby, Methods in Behavioral\nResearch ( 1993 ).",
                "footnotes": [],
                "citations": [
                    "beekman_1996",
                    "desberg_1994",
                    "goodman_1993",
                    "winkler_et_al_1994",
                    "butler_1992",
                    "ray_and_ravissa_1998",
                    "cozby_1993"
                ]
            }
        },
        {
            "1.7": {
                "text": "[1.7] HyperCard was the first generally available tool for developing\nmultimedia applications. Its design metaphor is a stack of cards, each of\nwhich may contain text fields, buttons, pull-down menus, graphics, and so\non. Buttons, fields, portions of text, and even cards can be programmed\nso that clicking on them with the computer’s mouse causes some action to\noccur—moving to a new card, playing music, viewing a movie, viewing hidden\ntext, etc. Stack design often provides for nonlinear access—that is, the\ncards do not have to be accessed in a specific order. For example, clicking\non an item in a Table of Contents card can take the user directly to the\nspecified section of the stack; clicking on highlighted words (“hot\ntext”) might take the reader to a glossary with a definition of that\ntext or to another section of the stack that explains a related concept.\nA diagram might be covered with invisible buttons, programmed so that clicking\non a specific location will transport the user to another card with related\ninformation, graphics, or sound. Often, at least within sections, linear\nnavigation is also possible by clicking on buttons—typically right or left\narrows—to move to the next or previous card in the sequence. Thus both\nlinear and nonlinear learning styles can be accommodated within the same\nstack. The integration of graphic representations, explanatory text, sound\nfiles of musical excerpts or spoken narrative, and movies allow the learner\nto explore a topic through many learning modalities.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "1.8": {
                "text": "[1.8] HyperCard has five user levels: Browsing, Typing, Painting, Authoring,\nand Scripting. In the Browsing level, the user can explore (or navigate)\nthrough stacks but cannot make any changes in them. The Typing level allows\nthe user to enter and edit text in fields. The next level allows users to\nuse Paint tools to change the appearance of cards and backgrounds. The Authoring\nlevel allows users to add new cards, add buttons and fields and change their\nappearance, link buttons to other cards, add transition effects, etc.—all\nthrough the use of menus and mouse clicks. In this level, HyperCard automates\nthe creation of HyperTalk “handlers” that cause appropriate actions.\nThe Scripting level allows the user to program HyperCard in its native programming\nlanguage, HyperTalk. 2. USING THE TOOLS TO TEACH THE TOOLS ( TOC )",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "2.1": {
                "text": "[2.1] While planning the course, we decided to use multimedia techniques\nin our teaching wherever possible, and devised a pedagogical method we call\n“Using the Tools to Teach the Tools.” This had several advantages\nin a course such as this: 1) it provided immediate examples of the utility\nof the methods we were teaching; 2) it facilitated the instructors’ rapid\ndevelopment of skills with the programming techniques they would be teaching;\n3) the programs developed would serve as study examples later in the course\nwhen they were learning to program in HyperTalk. Figure 2 . Bullet Lecture: Internal Sounds Demo (click to watch video) Figure 3 . Portion of Stack from SMT Presentation (reduced to half size) (click to watch video) Figure 4 . Evaluation of Software (Class Outline) (click to enlarge and see the rest) Figure 5 . Online Journal (click to watch video) Figure 6 . A Student Project (Opening Sequence, half size) (click to watch video) [2.2] The first of our “teaching tools”\nwas a HyperCard stack we called a “bullet template.” It was motivated\nby the authors’ aversion to lectures in which the presenters put up transparencies\ncovered with paper so the audience can see only the point currently being\ndiscussed. Instead, our stack uses bullet paragraphs with “fields”\nfor adding text. The presenter alternately shows or hides the text by clicking\non the bullet, and can move drag bullets to different positions for page\nformatting. Menu items are provided for hiding or showing all of the text\non a card and for aligning the text. A button on the bottom of the page\nunlocks and locks the text fields so that they can be modified. Scripted\nbuttons can be added to the card for going to other cards or other HyperCard\napplications, or scripts can be added to the fields, so that clicking on\nthe text causes some action to be taken. Figure 2 is an example of a class\npresentation on HyperCard’s internal sounds. We have used this device for\npreparing many class lectures, and in a larger format, with color added,\nto do presentations at conferences. Figure 3 is a portion of the stack we\nused for our presentation at the 1996 SMT Conference. Many buttons in this\nstack are linked to other stacks, so the whole presentation can be made\nfrom one program. (Here, the QuickTime movie is reduced to half size to\nfit in web browsers.) Our lecture notes are provided in this format for\nour students on each of the lab computers, and more advanced students can\nstudy the programming used to implement the stack as well. Other examples\nof our pedagogical tools—an online journal and computer-implemented music\ncognition experiments—are discussed below. 3. SOFTWARE REVIEW—AN ONLINE JOURNAL ( TOC )",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "3.1": {
                "text": "[3.1] A review of commercial instructional products serves two pedagogical\npurposes. First, it familiarizes students with the applications that are\navailable, which will serve them well in future teaching positions. Second,\nstudents are encouraged to make notes on features they like, don’t like,\nor could be improved upon. This suggests techniques they might implement\nin their own final projects. [3.2] In keeping with “teaching tools”\nphilosophy, we designed an Online Journal for the students’ use. The first\ntime we taught the course we developed criteria for software evaluation\nin class discussion after reading Desberg’s chapters on software design\nand evaluation. The outline designed by the class is shown in Figure\n4 . Using this as a starting point, Brinkman wrote a HyperCard Stack\nfor use in the review process. The journal template consists of a blank\ntitle card, one card for a review, and a help card. New review cards are\nadded by the student as needed. Each review card has fields for the title,\nreviewer, date, and author, and radio buttons for indicating the software\ntype (Tutorial, Drill and Practice, Game, or Simulation). In addition, students\nclick on buttons to specify an overall rating of the program (1 to 5 in\nincrements of .5). Buttons are provided for accessing text fields for describing\nPublication Information, System Requirements, Overview, Visual Style, Navigation,\nInstructions, General Discussion, Content, and Other). Clicking on each\nbutton causes a pop-up field to cover the card, with the button name as\na title bar. Scrolling fields are used so that as much information as needed\ncan be entered. The student can see an outline of what should be included\nin the field by shift-clicking on the title bar. A pull-down menu allows\nthe user to print a single entry or the whole journal, or to save entries\nas a text file that can be imported into other word processing programs.\nStudents are encouraged to do a thorough and thoughtful review of each of\ntheir chosen software packages—not simply to report what is there but to\nevaluate the content and its utility for various audiences, the implementation,\nand user interface. Students can have the journal stack open at the same\ntime as the applications they are reviewing, so they can flip back and forth.\nAn example of this stack, by Tom Toner (a D.M.A. percussion student), is\nshown in Figure 5 . The first year, we had students review five products,\nbut subsequent years we cut back to three to allow additional time for development\nof their final projects. Each student is also required to do a one-page\nsummary of one or two programs to share with the class. 4. GETTING STARTED ( TOC )",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "4.1": {
                "text": "[4.1] Each year, we begin the class by showing some of the best final\nprojects from previous classes. Figure 6 shows the opening sequence from\none such project by Jon Hynes, a D.M.A. piano student. (Others are shown\nin section 8 of this essay.) This demonstration gives the students a good\nidea of where the course is headed and helps to set high expectations for\ntheir own final projects. Although we have had some excellent projects from\neach class, this practice (along with our increasing experience in teaching\nthe material) has helped to raise the overall quality of final projects\neach year we have taught the course. Next we introduce students to HyperCard\nin a Hurry (Beekman), which is designed as seven “sessions”\nthat progress logically through HyperCard’s user levels, from Browsing through\nsimple Scripting. The last unit introduces color tools (which were not available\nin early versions of HyperCard) and discusses various “external commands”\nfor controlling external devices, synthesizing speech, and controlling QuickTime\nmovies. Recently we have introduced color tools much earlier in the course\nrather than waiting or Beekman’s final session.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "4.2": {
                "text": "[4.2] Each of Beekman’s units leads students through detailed steps to\ncreate a working HyperCard stack. This learn-by-doing pedagogy provides\nan effective and fast introduction. From the start, we supplement these\nexercises with readings in Goodman for more detailed information, and often\nhave the students do a second version of the assignment that is much more\ncomplete and adds various “bells and whistles,” or that makes\nthe project more meaningful. For example, Session 2 “The Dynamic File\nCabinet: Information Storage and Retrieval,” teaches students to use\nan “Address Book” stack that comes with HyperCard, and then teaches\nthe reader how to increase the user level, get into the “background”\nof a card, delete or copy fields and buttons, and add labels to fields.\nWe supplement this lesson by giving detailed instructions for modifying\nthe stack to make a custom “Discography” for cataloguing their\nrecordings. This new version of the stack requires the students to change\nfield names, add new fields and buttons, and write a simple button script.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "4.3": {
                "text": "[4.3] Beekman’s Session 3 teaches the Authoring level of HyperCard and\nPaint tools, through the creation of a stack that illustrates an Egyptian\npyramid, with buttons that allow the user to “enter” one of the\nchambers and then to return to the diagram of the pyramid. We teach the\nstudents how to add “clip art” and how to add scripts to play\nmusic using HyperCard’s built-in sounds. Students then create a second version\nof the Pyramid stack that is more ornate, illustrates each room of the pyramid,\nand adds traveling music while changing cards. Figure 7 shows the version\ncreated following Beekman’s instructions. Figure 8 is the much more creative\nversion done by Kristin Tait, a D.M.A. percussion student, who provided\nfor direct navigation between the pyramid “map” and individual\nrooms or for a “tour” of the pyramid via clicking on an asp to\nmove from room to room. Tait also made good use of perspective in designing\nthe various rooms. Beekman’s instructions result in nearly identical student\nstacks, while our modified assignments provide a vehicle for student individuality\nand creativity. We always have a stimulating class session showing different\nversions of these assignments; the presentation also provides an opportunity\nto critique design decisions made by the students. In general, we require\nstudents to do the basic assignment as an ungraded exercise, and then collect\nand grade the extended creative version. Figure 7 . Beekman’s Pyramid (click to watch video) Figure 8 . Student Pyramid with Sound, Clip Art, and Perspective (click to watch video) 5. TEACHING HYPERTALK PROGRAMMING ( TOC ) Figure 9 . Scripting Assignment 1 (click to enlarge and see the rest) Figure 10 . A Student Solution to Scripting Assignment 1 (click to watch video) Figure 11 . Theory 423 Scripting Assignment #2 (click to enlarge and see the rest) Figure 12 . A Student Solution to Scripting Assignment 2 (click to watch video) Figure 13 . Butler Example Assignment (click to watch video)",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "5.1": {
                "text": "[5.1] While users can create useful and even impressive stacks without\never doing any programming, learning the scripting language behind HyperCard\nempowers them to do many things that would otherwise be impossible, such\nas storing information about students and their progress (in CAI), controlling\nexternal devices using external commands, and creating applications that\nwould be impossible without the finer level of control that scripting provides.\nFinding the correct balance is difficult, because some of the students in\nour multimedia class have already taken Brinkman’s two-semester programming\ncourse, some are experienced programmers, and some have never used a computer\nfor anything more demanding than word processing. We begin laying the groundwork\nearly—during the first or second class—by teaching students how to “peek”\nat the scripts in buttons to see how the task is actually done, and to introduce\nthe elemental concepts of object oriented programming. For example, after\nthey have used the automated tools to link a button to a card, we encourage\nthem to look at the “handler” (procedure) in the button script,\nsomething like: on mouseUp go to card id 1045 end mouseUp Even at this early stage, we explain that clicking the mouse sends a\n“mouseDown” message through the system; releasing the mouse sends\na “mouseUp” message, which causes the on-screen button to perform\nthe action: go to the specified card. [5.2] We introduce other messages and discuss\nmessage passing hierarchies (precedence) and more arcane topics a bit later.\nGenerally we introduce new concepts with a “bullet lecture” and\ngive related reading assignments in Goodman, provide a handout summarizing\nthe techniques, and do in-class demonstrations by typing commands into the\nmessage box or writing handlers to illustrate techniques. If we have prepared\na longer demonstration, the stacks are left on computers where the students\ncan study them. We also discuss the scripts in class and give students a\npaper copy that they can study at home. We have designed a series of “scripting”\nassignments that teach the basics of programming to the novice, but encourage\nmore advanced students to extend the exercises. As a first scripting exercise,\nwe discuss button and field properties. Students are already familiar with\nsome of these from setting them with menus. We provide a handout listing\nall of the properties of buttons and fields, explain how to set these properties\nin HyperTalk, do some in-class illustration and experimentation, and then\ngive them an assignment which forces them to master the concepts. Figure 9 is a listing of the\nfirst assignment; Figure 10 shows a solution by Jocelyn Neal (a Ph.D. theory\nstudent). This student’s solution features music-related quotes from Hugo, Wagner,\nStravinsky, Congreve, Heine, and Thoreau. Clicking on the author’s name\nhighlights the appropriate text, and other buttons display the sources and\ndates. The stack also makes good use of Art Deco borders provided as resources\nby HyperCard. [5.3] After teaching control structures (if\n.. then .. else) and various forms of loops (repeat until, repeat with,\nrepeat while, etc.), we give another assignment in which students use simple\narithmetic and control structures to move buttons from one place on the\nscreen to another. Figure\n11 shows the assignment; Figure 12 again shows a student solution.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "5.4": {
                "text": "[5.4] Some students, especially those with no programming background,\nfind these assignments difficult and need some assistance to complete them,\nbut most become fairly comfortable with writing or modifying handlers by\nthe end of the course, and some of the more experienced students do some\nremarkable programming for their final projects.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "5.5": {
                "text": "[5.5] A later scripting assignment deals with using the clickLine, a\nHyperTalk function that identifies the line number and field name of the\nlast field the user clicks on. Once students have learned how to write handlers\nand use some external commands, this function can be used in many different\nways, e.g., building a table of contents linked to other cards, or building\na form chart that plays the appropriate passage from a CD when the user\nclicks on a form label. These techniques are demonstrated in Section 8 in\nmany of the final projects. 6. USING EXTERNAL COMMANDS ( TOC )",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "6.1": {
                "text": "[6.1] Many extensions to HyperCard are available in the form of external\ncommands—utility programs written in high-level programming languages such\nas C or C++. These commands can be called from HyperCard to control devices\nsuch as MIDI synthesizers and CD players. We incorporate several of these\nin our course. Voyager’s CD Audio Toolkit provides tools for indexing and\naccessing music on compact disks. We introduce this early in the course\nduring our unit on music cognition and perception. After reading several\nchapters in David Butler’s The Musician’s Guide to Perception and Cognition, the students are given an introduction to the Voyager toolkit, and use it\nto make buttons that play musical examples from Butler’s CD. In a follow-up\nassignment, they import music notation for the examples, and design a stack\nthat displays the examples with explanation, and plays the musical excerpts\nfrom the CD. This exercise provides practice in presenting material in a\nmultimedia format, as well as in using the Voyager tools and a music notation\npackage. A solution by Jeff Markarian, a Ph.D. theory student, is shown\nin Figure 13 .",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "6.2": {
                "text": "[6.2] The Voyager toolkit is also invaluable for its many examples of\nscripts for doing different types of tasks with music CDs, written using\ntheir external commands. As a simple example, the command “CDPlay 00,01,15,02,22,45”\nplays a segment of a compact disk in the computer’s CD drive. The command\nspecifies the starting time and ending time of the segment in minutes, seconds,\nand frames (75 per second), measured from the beginning of the CD. Commands\nlike this can be placed in scripts in buttons, fields, backgrounds, and\ncards to control the CD player. Later in the course, after students have\nhad more HyperTalk programming experience, we study some of the more elaborate\nscripts, such as those that link a succession of cards to a CD passage or\nthat highlight measures in music notation as a CD passage plays. We provide\nhandouts with details of the Voyager external commands and functions with\nexamples of their use; many students use these tools in their final projects.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "6.3": {
                "text": "[6.3] We also introduce and demonstrate other external commands. Although\ntime has not permitted formal assignments using these, demonstration stacks\nand manuals are available, and we help students to use them in their final\nprojects if they are needed. We have used two packages for controlling MIDI—Opcode’s\nMIDIplay, and Earlevel’s HyperMidi. Midiplay is no longer actively supported,\nbut it is available from Opcode’s educational contact, and we have used\nit in implementing cognition experiments (see below). One of our previous\nstudents, John Clevenger (a Ph.D. theory student), is using HyperMidi with\nHyperCard to develop an ear-training package that is quite impressive.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "6.4": {
                "text": "[6.4] We also introduce QuickTime movies through Apple’s QuickTime Tools,\ndistributed with HyperCard. These powerful tools make it easy to add movies\nto stacks, but are also useful for playing MIDI files and sound files. One\ncan either display a QuickTime controller on a card or, using the Advanced\nTools and some scripting, control the files from scripts without showing\nthe controller. 7. IMPLEMENTING MUSIC-COGNITION EXPERIMENTS\n( TOC )",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "7.1": {
                "text": "[7.1] Each time we have taught the course, we have included a cognition\nexperiment as part of the course design. We introduce the cognition component\nearly through readings in Butler and the Voyager CD Audio Toolkit assignment.\nLater we teach a unit on experimental design, including readings carefully\nchosen by Marvin to lay the groundwork for our experiment. Then, as a class\nproject, we design, implement, and carry out an experiment. Marvin proposes\nthe topic, which is refined and developed through class discussion, and\nstudents help to locate and prepare appropriate musical stimuli. Then, while\nstudents are working on their final projects, Brinkman works on his: implementing\nthe experiment in HyperCard. Students in the class recruit friends and classmates\nto participate as subjects and help to administer the experiment by overseeing\nparticipant sessions. (With a student body of roughly 800 undergraduate\nand graduate students, Eastman is a wonderful place for finding participants.)\nStudents in the course are given an introduction to APA (American Psychological\nAssociation) style and each write the first part of a paper on the experiment,\ndescribing the hypothesis and method, but omitting the section on results\nand analysis. The instructors do a preliminary analysis of the data using\nStatview; we present preliminary findings to the class late in the semester.\nAfter the term is over, we do a more leisurely and thorough analysis of\nthe data to prepare papers for eventual conference presentation and publication,\nwith due credit given to our students who participated in running the experiment.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "7.2": {
                "text": "[7.2] There are many advantages to the computer implementation. If the\nprogram is designed well, the subjects can participate with little outside\nintervention, although we always have a class member or instructor available\nto answer questions if necessary. The computer is used for all aspects of\nthe experiment—it gives instructions, collects data on the participants,\npresents practice problems, administers a pretest, presents the stimuli,\nand collects data on responses. Our programs randomly generate a different\nstimulus order for each subject, eliminating learning effects as a “confound.”\nHyperCard can measure subjects’ response times to a 60th of a second without\nadding any extra data- collection hardware. All data are saved to the hard\ndisk in text files as comma-separated lists that import easily into Excel\nand Statview. The greatest advantage of the computer implementation is the\namount of information, both about the subjects and about the stimuli, that\nwe can embed in these files. We can massage the data in many ways, and perform\nstatistical analysis of the interaction between many different factors,\nand we avoid the drudgery and chance of introducing errors associated with\nmanual transcription of subject responses. Figure 14 . Cognition Experiment: Collecting Data (click to watch video) Figure 15 . Cognition Experiment: User Interface 1 (click to watch video) Figure 16 . Cognition Experiment: User Interface 2 (click to watch video)",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "7.3": {
                "text": "[7.3] We have implemented three experiments to date, one having to do\nwith differences in tonic perception by absolute-pitch (AP) and relative-pitch\n(RP) listeners, and two on perception of tonal closure by trained musicians.\nSpace does not permit a detailed discussion of our hypotheses and results—these\nwill be published elsewhere. Here, we will concentrate on the computer implementation.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "7.4": {
                "text": "[7.4] In the first part of an experiment session, we collect data about\nthe subjects, their age, sex, primary instrument, academic discipline, number\nof years of training, etc. Although some questions vary from experiment\nto experiment, the method of collecting the data is similar, using a combination\nof check boxes and dialog boxes. Before going on, the participant is shown\na summary of the data. Clicking on any item with the mouse allows the subject\nto go back and change an answer. This portion of an experiment is shown\nin Figure 14 .",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "7.5": {
                "text": "[7.5] Each of our experiments to date has included a “pretest”\nto see to what degree the subject possesses “absolute pitch” (AP).\nIn the first experiment, we used both AP and RP subjects, and needed to\ntrack response times for each stimulus. We designed an interface with note\nnames arranged in a circle around a central “Play” button, so\nthat each response would be equidistant from “Play.” The subject\nclicks on “Play,” listens to the stimulus, and then clicks on\none of buttons to identify the pitch (or tonic, in the actual experiment).\nSubjects could change their answers by clicking on different buttons. When\nthey click on central button, which has changed to “Ready,” their\nanswers are recorded. We trained subjects to use the interface through a\npractice round in which the user clicked on buttons that were randomly selected\nby the computer until they could perform the task consistently in under\na second. In a second practice round, pitches were played and the subjects\nselected the notes they thought they heard. The actual pretest followed\nthe same format, except that many more pitches were given (in random order).\nThe computer recorded the actual note played, the subject’s answer, time\nfrom stimulus to answer, and whether the answer was correct or incorrect,\nalong with the subjects ID number and other pertinent information. This\nportion of the experiment is shown in Figure 15 .",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "7.6": {
                "text": "[7.6] In the second part of this experiment, subjects used the same interface\nto identify the perceived tonic in excerpts chosen from piano and chamber\nmusic literature. (This is not shown because the interface is the same.)\nIn this portion of the experiment, subjects who had identified themselves\nas having RP were given a reference tone before each excerpt was played.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "7.7": {
                "text": "[7.7] Because we were not concerned about timing information in the next\ntwo experiments, we redesigned the interface for the pretest as an on-screen\nkeyboard. The participant identified pitches by clicking on the keyboard.\nA button above the keyboard changed appropriately from “Play”\nto “Ready,” and a field above gave instructions. This interface\nis shown in Figure 16 .",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "7.8": {
                "text": "[7.8] Our experiments on tonal closure used recorded excerpts or short\nmovements as stimuli. After each excerpt was played, the subject was asked\nto answer questions by clicking on check boxes on an answer form. In keeping\nwith accepted methodology, the experimental questions were intermingled\nwith other questions to conceal the hypothesis from the participants. The\nanswer form for our latest experiment is shown in Figure 17 . The participants\nwere required to answer all questions. [7.9] We have used a variety of methods for\npresenting stimuli. The first two years we used a MIDI synthesizer controlled\ndirectly by MIDIplay to present the single-pitch stimuli and sequences of\ninterference tones between trials. This was facilitated through MIDIplay’s\n“xmit” command, which makes it possible to send MIDI control signals\nto the synthesizer directly. (See Figure\n18 for a simple example.) In our first experiment, we made digital recordings\nof the musical excerpts and played them as resources in stacks. By our second\nexperiment, we had obtained a CD recorder, so we made a custom CD with each\nstimulus on a separate track. Individual tracks were easy to access through\na simple Voyager commands, e.g., “CDplay1 5” to play the fifth\ntrack on the CD. In our third experiment, we used a CD to present all stimuli,\nincluding the pieces, isolated tones for the AP pretest, and multiple sequences\nof interference tones. Those that were produced by a synthesizer were recorded\ndigitally directly from a Kurzweil PC 88 MX synthesizer, using SoundEdit\n16. Thus, we did not have to deal with the idiosyncrasies of MIDI setup,\nand could run several subjects at a time on different computers, each with\na separate copy of the CD. Figure 17 . Cognition Experiment: User Interface 3 (click to watch video) Figure 18 . A MIDIplay Script (click to watch video)",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "7.10": {
                "text": "[7.10] There is a great deal of programming behind these experiments.\nWe spend some class time discussing problems and their solutions and demonstrating\nprogramming techniques, and feedback from the class is often helpful in\nrefining the interface and presentation. Although details of the programming\nare beyond students without previous programming experience, all can benefit\nfrom a general knowledge of the problems that need to be overcome, and a\nprint-out of all of the scripts used to implement the experiment is made\navailable for any students who wish to study them. 8. STUDENT PROJECTS ( TOC ) Figure 19 . Final Project Guidelines (click to enlarge)",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "8.1": {
                "text": "[8.1] Each student is required to do a final project, which is the culmination\nof the semester’s work, and gives the students an opportunity to tie together\nmany facets of the course. Students submit a proposed topic and rudimentary\noutline by about the middle of the semester, and in the last half of the\ncourse we minimize daily assignments so they can concentrate on this major\nundertaking. Our general guidelines for the student projects are shown in Figure 19 . \nWe make individual\nappointments with the students to review their progress, to give guidance\nand assistance when necessary, and to help solve programming problems in\nprojects that require a scripting.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "8.2": {
                "text": "[8.2] Projects may be literature-based or tutorial, and may be designed\nfor different audiences. Most of our students present college-level material,\nbut a few have designed programs for younger children. Since projects are\nintended for in-class use only, we allow students to use commercial recordings\nand to scan art work from published sources, but warn them that if they\never want to seek publication or distribute their stacks to others, they\nwill have to obtain permission from the copyright holders. We also insist\non high standards of academic integrity—when material is used that is not\ntheir own, sources must be acknowledged.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "8.3": {
                "text": "[8.3] We conclude with samples of students’ final projects from our course.\nSpace, downloading time, and copyright restrictions prohibit us from showing\ncomplete projects in this medium. We hope that the excerpts shown here will\nbe sufficient to demonstrate the kinds of things our students are doing\nand the quality of their work. Most students designed projects that reflect\ntheir interests and major area of study. Figure 20 . Dorhout Title Page and Main Menu (click to enlarge and see the rest)",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "8.4": {
                "text": "[8.4] Many of the projects, particularly those by performance majors,\nare literature-based. One example is a stack by Bret Dorhout, a D.M.A. student\nin organ performance, which presents information about Bach’s Cantata 93,\n“Wer nun den lieben Gott laesst Walten.” Figure 20 shows his title\npage and table of contents, which is linked to the various sections of the\nstack. Each card of the stack has the CD controls shown here; clicking on\nthe picture of Bach in the lower right-hand corner returns the user to the\ntable of contents. This student completed two major portions of the stack. Figure 21 shows part of the Text Translation section. Clicking on a line\nof text highlights the line and plays the musical setting. As the music\ncontinues, the highlight follows the text, and cards flip to the next section\nwhen necessary. Listening can be nonlinear—the user can click on any line,\nin German or English, to hear the setting of that text, or can listen to\na whole section, or even the whole cantata straight through. Dorhout also\nimplemented a View the Score section, a small portion of which is shown\nin Figure 22 . The reduced score was created in Finale and copied into the\nstack. Then a transparent button was placed over each measure and, following\nan example from the Voyager CD Audio Toolkit, the stack was programmed so\nthat clicking on any measure would play it, while “button effects”\nwould show the listener which measure was playing. Dorhout enabled and disabled\nthe buttons in sequence (disabling causes the them to turn gray and partially\nmask the music). He discovered that this results in a more aesthetically\npleasing animation than the more common highlighting technique, which causes\na white foreground on a black background. Again, the user can listen to\nthe music continuously or jump around at will, and cards change automatically\nat the appropriate time. Figure 21 . Dorhout’s Text Translation (partial window) (click to watch video) Figure 22 . Dorhout’s “View the Score” (partial window) (click to watch video)",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "8.5": {
                "text": "[8.5] Tom Toner, a D.M.A. percussion student, did his project on John\nCage’s Third Construction. After an extended animated introduction (not\nshown due to downloading time), the table of contents appears. Toner used\na Voyager technique—linking cards to the CD—to describe the percussion\ninstruments and techniques heard as the piece plays, as shown in Figure\n23 . He also implemented a reference section on the percussion instruments\nused, with accompanying text, pictures, and sounds. Clicking on the pictures\nplays a recording of the instruments, which he played himself and recorded\nin his studio, then digitized for use in his project. The user can also\nhear an excerpt from Third Construction that shows the instrument in the\ncontext of the piece. (See Figure 24 .) Figure 23 . Toner’s “Listening to Third Construction” (click to watch video) Figure 24 . Toner’s “The Instruments” (click to watch video)",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "8.6": {
                "text": "[8.6] Kurt Fowler, a D.M.A. student in cello performance, did a project\non Bach Cello Suites. He was particularly interested in performance issues—contrasting\neditions and different bowing solutions. His attractive black and white\nstack is an excellent example of multilevel design. Since reduced-sized\nmovies of this stack were not effective, we will show some highlights with\nscreen shots. When the stack opens, a recording of a Bach Cello suite plays\nautomatically as the title card appears on screen. Clicking on the title\npage takes the user to the main menu or table of contents. The design is\nconsistent and very clean, with few visible buttons for navigation. The\nuser moves to other sections or submenus by clicking on lines in the table\nof contents, and returns by clicking on pictures, which appear to be scanned\nimages of wood-cut impressions. Figure 25 shows the title page and several\nof the submenus. Not all sections were completed during the course, but\nthose that were are impressive and innovative. Figure 26 shows the first\npage of his “Bowing Solutions” section. The user can page through\nthe movement one measure at a time or jump to any specified measure, and\nsee scanned images of the measure from six different historical and modern\neditions. Clicking on the graphics brings up a full page of music from the\nselected edition so the measure can be seen in context. The user can compare\nthree different performances by selecting a check box for Pablo Casals,\nJanos Starker, or Anner Bylsma and then clicking on Play This Measure. (Figure\n26 also has QuickTime movies of the sound files for this measure.) We were\nable to accomplish this without swapping CDs by combining tracks from several\ncommercial recordings on one custom-made CD, which was accessed using Voyager\nCD Audio Tool Kit. Fowler also implemented one movement of “View the\nScore” in a similar manner, with animated measure highlighting, check\nboxes to select the desired performance, and buttons to take the user to\na scanned image of each different edition. Figure 25 . Fowler’s Stack (click to enlarge and see the rest) Figure 26 . Fowler’s “Bowing Solutions” (click to enlarge and listen)",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "8.7": {
                "text": "[8.7] We saw the opening of Jon Hynes’s project earlier in Figure 6.\nHynes is a D.M.A. student in piano performance who plans to use this program\nin his private teaching studio after he finishes his degree. His students\nwill be able to use the program to learn more about the piano, music history,\ncomposers, and piano literature, etc., while waiting for their lessons.\nAlthough the original program was in small-screen format and black and white,\nhe has since redesigned it for a larger computer screen and added color,\nincluding many scanned images of instruments and composers. His main table\nof contents and some of the submenus are shown in Figure 27 . In the sections\non composers and instruments, clicking on the reduced picture next to the\ntext takes the user to another card with a large full-color picture, so\nmore detail can be seen. Last summer (1997), in an independent study class\nwith Brinkman, he began work on the music reading and theory rudiments sections.\nHe has designed an attractive on- screen keyboard, which can be modified\nthrough changing button, card, and background scripts to serve in many different\ncapacities. In Figure 28 , it is used for beginners to practice identifying\nnotes, which appear in a field on the screen in random order. Students hear\nthe notes when they click on the screen. They are given immediate feedback,\nand questions they miss are placed in a queue for later review. Students\nspecify the clefs they want to practice, and the program records the students’\nnames, exercises performed, and scores in external files so the teacher\ncan track their progress. Figure 27 . Hynes’s Stack (click to enlarge and see the rest) Figure 28 . Hynes’s Music Reading Drill (click to enlarge)",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "8.8": {
                "text": "[8.8] Allison Weitzman, an undergraduate theory major, was taking courses\nin jazz theory and improvisation when she took our class, and designed a\nprogram for practicing jazz ear training. Her project, which is remarkably\ncomplete, used a custom-made CD for recorded examples and MIDIplay to control\na synthesizer. Her program uses an attractive design with a scanned score\non the title page. The menu is hidden, but programmed so that items appear\nwhen the mouse passes over them, and clicking on a menu item takes the user\nto the appropriate section. Music plays whenever the user returns to the\ntitle page (table of contents). Sections for practicing intervals, scales,\nmodes, chords, and harmonic progression are implemented. The interface is\nshown in Figure 29 (we won’t take time to answer the questions). Users can\ncustomize each section by checking boxes to specify exactly what they want\nto practice. The Harmony section is most impressive. The user clicks on\na button to hear a recording of one of the jazz greats playing a piece,\nthen listens to a harmonic reduction of the chord progression synthesized\non the MIDI keyboard. The object is to enter the correct chord symbols.\nThe user selects answers from the bottom of the page, and then enters them\nby clicking on fields below the score. Clicking on any measure starts playing\nthe MIDI file at that point. After the exercise is completed, it is graded\nand the user is given feedback. An example of this interface is shown in Figure 30 . Figure 29 . Weitzman’s Jazz Ear-Training Program (click to watch video) Figure 30 . Weitzman’s Jazz Progressions Drill (click to watch video) Figure 31 . Campbell’s Stack (click to enlarge and see the rest)",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "8.9": {
                "text": "[8.9] Jeff Campbell, a jazz bass player who was recently hired on the\nJazz and Contemporary Media faculty at Eastman, did another jazz project\nfor our course. His stack is an excellent tutorial on jazz bass, which explains\nmany of his improvisation concepts with musical examples in notation that\ncan be heard on a CD that he recorded himself for the project. A few frames\nfrom his stack are shown in Figure 31 .",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "8.10": {
                "text": "[8.10] Several projects have used multimedia techniques to good advantage\nfor illustrating music-theoretical concepts. Valerie Errante, a D.M.A. voice\nstudent, did her project on Schubert’s Erlkoenig. In her discussion of musical\nstructure, she modified Voyager’s measure-highlighting technique by placing\nbuttons linked to the CD over a diagram of the song (from Brinkman’s class\nnotes for sophomore theory). While listening to the song, the user can follow\nthe tonal motion in a bass reduction as highlighted buttons show the location\nin the form diagram. Alternately, the user can click the mouse on any section\nto hear it. This is especially useful for comparing sections or for discussing\nSchubert’s musical characterization of the four cast members (narrator,\nfather, son, and king). In Figure 32 we contrast the three statements of\nthe refrain, “Mein Vater, mein Vater,” sung by the son. Errante\nalso included a more detailed discussion of the formal structure—shown\nin Figure 33 without sound to save downloading time. Figure 32 . Errante’s Interactive Form Diagram (click to watch video) Figure 33 . Errante’s Tonal Discussion (click to watch video)",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "8.11": {
                "text": "[8.11] A project on Schubert’s Nacht und Traeume by Jocelyn Neal, a Ph.D.\ntheory student, also contains a good deal of analytic information. Figure\n34 shows her animated demonstration of a common-tone modulation. In another\nsection, she linked Carl Schachter’s analytic reduction of the song to the\nCD. While the song plays, an arrow moves across the screen to make a direct\nvisual connection between the recording and the graph. Another button produces\nmore information about the graph. (See Figure 35 .) Figure 34 . Neal’s Common-Tone Modulation (click to watch video) Figure 35 . Neal’s Sketch Presentation (click to watch video) Figure 36 . Crumbley’s Speedwork Animation (click to watch video)",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "8.12": {
                "text": "[8.12] Stefanie Crumbley, a Ph.D. theory student, did a project related\nto her teaching in our Freshman theory course. Her work was based on drills\nthat Neil Minturn, our Freshman theory coordinator at the time, called “Speedwork.”\nIn these exercises, students learned basic patterns in tonal music, e.g.,\ntonic expansions through arpeggiation or use of passing chords, and were\nrequired to recognize them and apply them in practical situations quickly\nand fluently, i.e., to assimilate them and make them part of their musical\n“vocabulary.” Crumbley’s project showed many of these patterns\nin reduction with MIDI realizations, quizzed the students in their usage,\nand illustrated them in excerpts from Haydn symphonies. Figure 36 shows\nan animation used by Crumbley to demonstrate how these basic patterns can\nbe combined into a larger context. The year after completing our course,\nCrumbley—who was by then teaching the third year of our undergraduate theory\nsequence—used HyperCard to write an excellent tutorial on atonal theory\nthat was used in the course.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "8.13": {
                "text": "[8.13] We will show one stack from the abbreviated summer course we taught\nlast July. For the Summer Session course, we provided a set of template\nstacks so that students could get a quick start in the one-week intensive\nprogram. Daphne Leong, a Ph.D. student in our theory program, did a tutorial\non Bartok’s String Quartet No. 5. The opening sequence of her stack is shown\nas Figure 37 . For visual unity she used a scanned image of a Kandinsky painting\nin the opening sequence, and then used enlarged portions of this painting\nas backgrounds in other sections of her project. Figure 38 shows screen\nshots of sections from her stack. In the form section, the items in the\nform chart are linked to a commercial CD so that clicking on an item plays\nthat section of the piece. In the Listening section, she placed scanned\nimages of the score on cards, which also contained a description of the\naction and a form diagram. The cards change in synchrony with the music,\nand the highlighted button on form chart moves to show which section is\nplaying. Figure 37 . Leong’s Opening Sequence (half-size) (click to watch video) Figure 38 . Leong’s Stack (click to enlarge and see the rest) Figure 39 . Clevenger’s Feedback (half size) (click to watch video)",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "8.15": {
                "text": "[8.15] In Figure 39 we show an animation designed by John Clevenger for\nhumorous feedback in a theory tutorial. In this instance, the student is\nspelling chords while a graphic representation is built on screen. If the\nstudent’s answer is wrong, a dinosaur foot crushes the graphic, and “Godzilla”\ninvites the student to try again. This animation was created with AddMotion.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "8.16": {
                "text": "[8.16] In closing, we should state that, while these are good examples\nof final projects from our course, they are not atypical. We are constantly\namazed by what our students accomplish in a one-semester introduction to\nmultimedia programming, and it was difficult deciding which of some forty\nprojects that our students have done during the last three years we should\nshow here. Also, as we had hoped, several students have used these tools\nin their own teaching at Eastman and elsewhere. 9. FUTURE DIRECTIONS ( TOC )",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "9.1": {
                "text": "[9.1] The course has been extremely popular with students in the theory\ndepartment and in other disciplines. Although we have an official cap of\n10 students, the course has been over-enrolled each semester it has been\noffered. Last spring (1997) we had 18 students in the class, and turned\nseveral more away. Support for the course has also improved a great deal.\nIn Spring of 1996, James Undercofler, the Acting Director of the Eastman\nSchool of Music, allocated funds from an unrestricted donation to Eastman\nto begin a Multimedia Development Center. This enabled us to purchase a\nmuch more powerful computer to use as a teaching station, and to add a color\nscanner, a CD recorder, and other peripherals. Part way through the spring\n1997 semester, we moved the course into a new, well-equipped computer lab.\nThe lab was equipped through a National Science Foundation grant obtained\nby Dave Headlam and Mark Bocko, a University of Rochester electrical engineer,\nfor creating an interdisciplinary computer lab dedicated to computer use\nfor course-related work. We are currently in the process of reevaluating\nthe course content, and we will probably move from HyperCard to Macromedia\nDirector this spring. This change, whenever we make it, will involve major\nreworking of teaching materials, but much of what we have learned will be\napplicable in different programming environments. In our course evaluations,\nmany students have commented that the music- cognition part of the course\nis too much in too little time—they would prefer to have a separate course\nfor that area and expand the emphasis on programming (scripting) in the\npresent course. Thus we are considering moving the music cognition component\nto a separate course. This would also allow us to incorporate a unit on\ndeveloping multimedia for the web in the current course.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "9.2": {
                "text": "[9.2] There are probably as many styles of co-teaching a course as there\nare co-teaching teams. We have viewed this course as an equal partnership\nfrom the start. The course utilizes the individual and collective expertise\nof both authors: Brinkman’s long experience in computer programming with\nmusic applications, and Marvin’s work in music-cognition research and statistics.\nWe planned the course initially in many brain-storming sessions, and share\nteaching duties in almost every class. After each class we have a “post-mortem”\nsession in which we critique the class—what worked and what didn’t—and\nmake notes on things to improve the next time around. We keep our planning\nnotes and critiques on the computer for easy reference and review the next\ntime we teach the course. At this session we also set objectives for the\nnext class, plan the order of presentation, divide up preparation tasks,\nand when necessary, review and revise plans for the next few classes. Many\nassignments are graded together. When this is impossible due to time constraints,\nwe divide up the work and then meet to review our individual work and discuss\ngrades. Teacher comments are saved to a text file on student disks for each\ngraded assignment, which we either write together or review jointly before\nreturning to students.",
                "footnotes": [],
                "citations": []
            }
        },
        {
            "9.3": {
                "text": "[9.3] Teaching this course, even as a shared effort, has taken a tremendous\ncommitment of time and energy. The time required for class preparation,\nsolving technical problems, grading assignments, designing and implementing\nexperiments, and working with students on individual projects has been far\ngreater than that required for any other course either of has taught previously.\nBut the experience has also been a rewarding one, both in terms of our personal\nan professional development. We have presented papers on the course at the\nannual conferences of two professional societies (including SMT Baton Rouge),\nand at a public forum on Technology in Music Education at the opening ceremony\nof for the 75 anniversary of the founding of the Eastman school. We have\npresented papers on our work in music-cognition at four national and international\ncognition conferences. Our review of CD-ROM software is forthcoming in Journal\nof Music Theory Pedagogy , and we are preparing articles on the cognition\nexperiments for submission to appropriate journals. Finally, as a result\nof this work, the Eastman School was nominated last spring for a Smithsonian-Computer\nWorld Award for technical innovation in education, and information on our\nwork is included in the permanent collection at the Smithsonian and is available\non their web site < http://innovate.si.edu >.",
                "footnotes": [],
                "citations": []
            }
        }
    ],
    "mto": true,
    "category": "articles",
    "source": "mto/raw/mto.97.3.5.brinkman_marvin.html",
    "data": "mto/data/mto.97.3.5.brinkman_marvin.json"
}